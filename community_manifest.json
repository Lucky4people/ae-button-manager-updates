{
  "buttons": [
    {
      "name": "ClearCache",
      "description": "Creates a panel to clear all memory & disk cache, purge RAM previews, and reopen the current project.",
      "script": "// All Memory & Disk Cache Cleaner Script for After Effects\n// This script creates a panel with buttons to purge various caches and manage the project in After Effects\n\n(function () {\n    // Create a panel window\n    var panelWindow = (this instanceof Panel) ? this : new Window(\"palette\", \"Cache & Project Cleaner\", undefined);\n    panelWindow.orientation = \"column\";\n    panelWindow.alignChildren = [\"center\", \"top\"];\n    panelWindow.spacing = 10;\n    panelWindow.margins = 16;\n\n    // Add a title at the top\n    var titleText = panelWindow.add(\"statictext\", undefined, \"AE Cache & Project Tools\");\n    titleText.alignment = [\"center\", \"top\"];\n    titleText.graphics.font = ScriptUI.newFont(\"Arial\", \"BOLD\", 14);\n\n    // Create a group for buttons\n    var buttonGroup = panelWindow.add(\"group\", undefined);\n    buttonGroup.orientation = \"column\";\n    buttonGroup.alignChildren = [\"fill\", \"top\"];\n    buttonGroup.spacing = 8;\n    buttonGroup.margins = 0;\n    \n    // --- Button 1: Purge All Memory & Disk Cache (Unchanged) ---\n    var allMemoryAndDiskCacheBtn = buttonGroup.add(\"button\", undefined, \"Purge All Memory & Disk Cache\");\n    \n    // --- Button 2: Purge All Previews (RAM Cache - Green Bar) (Using command ID 2368) ---\n    var purgeRAMPreviewsBtn = buttonGroup.add(\"button\", undefined, \"Purge All Previews (RAM)\"); \n    \n    // --- Button 3: Reopen Project (Unchanged) ---\n    var reopenProjectBtn = buttonGroup.add(\"button\", undefined, \"Reopen Project (Clear Glitches)\");\n    \n    // Add separator\n    var separator = panelWindow.add(\"panel\", undefined, undefined);\n    separator.alignment = [\"fill\", \"top\"];\n    separator.height = 2;\n    \n    // Add status text\n    var statusText = panelWindow.add(\"statictext\", undefined, \"Ready\");\n    statusText.alignment = [\"center\", \"top\"];\n    statusText.preferredSize.width = 250;\n    \n    // Function to update status\n    function updateStatus(message, isError) {\n        statusText.text = message;\n        if (isError) {\n            statusText.graphics.foregroundColor = statusText.graphics.newPen(statusText.graphics.PenType.SOLID_COLOR, [1, 0, 0], 1); // Red for errors\n        } else {\n            statusText.graphics.foregroundColor = statusText.graphics.newPen(statusText.graphics.PenType.SOLID_COLOR, [0, 0.6, 0], 1); // Green for success\n        }\n    }\n    \n    // --- Button Functionality ---\n\n    // Button 1: Purge All Memory & Disk Cache\n    allMemoryAndDiskCacheBtn.onClick = function() {\n        try {\n            app.executeCommand(10200); // Command ID for Purge All Memory & Disk Cache\n            updateStatus(\"All Memory & Disk Cache Purged!\", false);\n        } catch(err) {\n            updateStatus(\"Error (Btn1): \" + err.toString(), true);\n        }\n    };\n    \n    // Button 2: Purge All Previews (RAM Cache) - using command 2368\n    purgeRAMPreviewsBtn.onClick = function() {\n        try {\n            // Attempting to use command ID 2368 for \"Purge All Previews\"\n            app.executeCommand(2368); \n            updateStatus(\"All Previews (RAM) Purged! (Cmd 2368)\", false);\n        } catch(err) {\n            updateStatus(\"Error (Btn2): \" + err.toString(), true);\n        }\n    };\n    \n    // Button 3: Reopen Project\n    reopenProjectBtn.onClick = function() {\n        try {\n            if (!app.project) {\n                updateStatus(\"Error (Btn3): No project is open.\", true);\n                return;\n            }\n\n            var currentProject = app.project;\n            var projectFile = currentProject.file;\n\n            if (!projectFile) { \n                updateStatus(\"Error (Btn3): Project must be saved once. Please save and try again.\", true);\n                return;\n            }\n\n            var projectPath = projectFile.fsName;\n            var projectName = projectFile.displayName;\n\n            updateStatus(\"Saving project: \" + projectName + \"...\", false);\n            currentProject.save();\n            \n            updateStatus(\"Closing project: \" + projectName + \"...\", false);\n            currentProject.close(CloseOptions.DO_NOT_SAVE_CHANGES); \n\n            updateStatus(\"Reopening project: \" + projectName + \"...\", false);\n            var reopenedProject = app.open(new File(projectPath));\n\n            if (reopenedProject) {\n                updateStatus(\"Project reopened: \" + projectName, false);\n            } else {\n                updateStatus(\"Error (Btn3): Failed to reopen project \" + projectName, true);\n            }\n\n        } catch(err) {\n            updateStatus(\"Error (Btn3): \" + err.toString(), true);\n        }\n    };\n    \n    // Show the window\n    if (panelWindow instanceof Window) {\n        panelWindow.center();\n        panelWindow.show();\n    } else {\n        panelWindow.layout.layout(true);\n        panelWindow.layout.resize(); \n    }\n})();",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs",
      "gifUrl": "https://github.com/Lucky4people/ae-button-manager-updates/blob/File/RCbanner_Play_TaurusXforanimator_gif.gif"
    },
    {
      "name": "INFO",
      "description": "Displays a detailed information panel for the selected layer, including transform properties, effects, masks, and more.",
      "script": "//LayerInfo.jsx\n//Script for After Effects that displays all information about the selected layer\n//Скрипт для After Effects, отображающий всю информацию о выбранном слое\n\n(function() {\n    // Проверка на наличие активного проекта\n    if (app.project === null) {\n        alert(\"Пожалуйста, откройте проект!\");\n        return;\n    }\n    \n    // Проверка на наличие активной композиции\n    if (app.project.activeItem === null || !(app.project.activeItem instanceof CompItem)) {\n        alert(\"Пожалуйста, выберите композицию!\");\n        return;\n    }\n    \n    // Проверка на наличие выбранных слоев\n    if (app.project.activeItem.selectedLayers.length === 0) {\n        alert(\"Пожалуйста, выберите слой!\");\n        return;\n    }\n    \n    var comp = app.project.activeItem;\n    var layer = comp.selectedLayers[0]; // Получаем первый выбранный слой\n    \n    // Создаем строку для хранения всей информации\n    var info = \"\";\n    \n    // Основная информация о слое\n    info += \"===== ОСНОВНАЯ ИНФОРМАЦИЯ О СЛОЕ =====\\n\";\n    info += \"Имя слоя: \" + layer.name + \"\\n\";\n    info += \"Индекс слоя: \" + layer.index + \"\\n\";\n    info += \"ID слоя: \" + layer.id + \"\\n\";\n    info += \"Тип слоя: \" + getLayerType(layer) + \"\\n\";\n    \n    // Временная информация\n    info += \"\\n===== ВРЕМЕННАЯ ИНФОРМАЦИЯ =====\\n\";\n    info += \"Начало слоя (In Point): \" + timeToFrames(layer.inPoint, comp.frameRate) + \" (\" + layer.inPoint + \" сек)\\n\";\n    info += \"Конец слоя (Out Point): \" + timeToFrames(layer.outPoint, comp.frameRate) + \" (\" + layer.outPoint + \" сек)\\n\";\n    info += \"Длительность: \" + (layer.outPoint - layer.inPoint) + \" сек\\n\";\n    info += \"Начало слоя в источнике (Start Time): \" + layer.startTime + \" сек\\n\";\n    \n    // Трансформации\n    info += \"\\n===== ТРАНСФОРМАЦИИ =====\\n\";\n    info += \"Позиция: \" + getPropertyValues(layer.transform.position) + \"\\n\";\n    info += \"Масштаб: \" + getPropertyValues(layer.transform.scale) + \"%\\n\";\n    info += \"Поворот: \" + getPropertyValues(layer.transform.rotation) + \" градусов\\n\";\n    info += \"Непрозрачность: \" + layer.transform.opacity.value + \"%\\n\";\n    \n    if (layer.transform.anchorPoint !== undefined) {\n        info += \"Точка привязки: \" + getPropertyValues(layer.transform.anchorPoint) + \"\\n\";\n    }\n    \n    // Маски, если они есть\n    if (layer.mask && layer.mask.numProperties > 0) {\n        info += \"\\n===== МАСКИ =====\\n\";\n        for (var i = 1; i <= layer.mask.numProperties; i++) {\n            var mask = layer.mask(i);\n            info += \"Маска \" + i + \": \" + mask.name + \", Режим: \" + getMaskMode(mask.maskMode) + \"\\n\";\n        }\n    }\n    \n    // Эффекты, если они есть\n    if (layer.effect && layer.effect.numProperties > 0) {\n        info += \"\\n===== ЭФФЕКТЫ =====\\n\";\n        for (var i = 1; i <= layer.effect.numProperties; i++) {\n            var effect = layer.effect(i);\n            info += \"Эффект \" + i + \": \" + effect.name + \"\\n\";\n        }\n    }\n    \n    // Стили слоя, если это текстовый слой или слой-фигура\n    if (layer instanceof TextLayer || layer instanceof ShapeLayer) {\n        if (layer.layerStyle && layer.layerStyle.numProperties > 0) {\n            info += \"\\n===== СТИЛИ СЛОЯ =====\\n\";\n            for (var i = 1; i <= layer.layerStyle.numProperties; i++) {\n                var style = layer.layerStyle(i);\n                info += \"Стиль \" + i + \": \" + style.name + \"\\n\";\n            }\n        }\n    }\n    \n    // Дополнительные свойства в зависимости от типа слоя\n    if (layer instanceof TextLayer) {\n        info += \"\\n===== СВОЙСТВА ТЕКСТА =====\\n\";\n        try {\n            info += \"Содержимое: \" + layer.text.sourceText.value + \"\\n\";\n        } catch (e) {\n            info += \"Содержимое: [Не удалось получить]\\n\";\n        }\n        \n        try {\n            var textDoc = layer.text.sourceText.value;\n            info += \"Шрифт: \" + textDoc.font + \"\\n\";\n            info += \"Размер шрифта: \" + textDoc.fontSize + \"\\n\";\n            info += \"Цвет текста: \" + rgbToHex(textDoc.fillColor) + \"\\n\";\n        } catch (e) {\n            info += \"Не удалось получить дополнительные свойства текста\\n\";\n        }\n    }\n    \n    if (layer instanceof AVLayer) {\n        info += \"\\n===== СВОЙСТВА МЕДИА =====\\n\";\n        info += \"Имя источника: \" + (layer.source ? layer.source.name : \"Нет источника\") + \"\\n\";\n        \n        if (layer.source) {\n            if (layer.source instanceof FootageItem) {\n                info += \"Тип источника: Футаж\\n\";\n                info += \"Размер: \" + layer.source.width + \"x\" + layer.source.height + \"\\n\";\n                info += \"Длительность: \" + layer.source.duration + \" сек\\n\";\n                info += \"Частота кадров: \" + (layer.source.frameRate || \"N/A\") + \" fps\\n\";\n            } else if (layer.source instanceof CompItem) {\n                info += \"Тип источника: Композиция\\n\";\n                info += \"Размер: \" + layer.source.width + \"x\" + layer.source.height + \"\\n\";\n                info += \"Длительность: \" + layer.source.duration + \" сек\\n\";\n                info += \"Частота кадров: \" + layer.source.frameRate + \" fps\\n\";\n            }\n        }\n        \n        info += \"Качество: \" + getQuality(layer.quality) + \"\\n\";\n        info += \"Приводит аудио: \" + (layer.audioEnabled ? \"Да\" : \"Нет\") + \"\\n\";\n        info += \"Видимый: \" + (layer.enabled ? \"Да\" : \"Нет\") + \"\\n\";\n        info += \"Трехмерный слой: \" + (layer.threeDLayer ? \"Да\" : \"Нет\") + \"\\n\";\n        info += \"Режим смешивания: \" + getBlendingMode(layer.blendingMode) + \"\\n\";\n    }\n    \n    // Режимы переключения (switches)\n    info += \"\\n===== РЕЖИМЫ ПЕРЕКЛЮЧЕНИЯ =====\\n\";\n    info += \"Видимый: \" + (layer.enabled ? \"Да\" : \"Нет\") + \"\\n\";\n    info += \"Заблокирован: \" + (layer.locked ? \"Да\" : \"Нет\") + \"\\n\";\n    info += \"Скрыт на панели слоев: \" + (layer.shy ? \"Да\" : \"Нет\") + \"\\n\";\n    info += \"Непрерывная растрировка: \" + (layer.continuesRasterization ? \"Да\" : \"Нет\") + \"\\n\";\n    info += \"Качество сэмплинга движения: \" + getMotionBlurType(layer.motionBlur, layer.adjustmentLayer) + \"\\n\";\n    \n    if (layer.trackMatteType !== TrackMatteType.NO_TRACK_MATTE) {\n        info += \"Track Matte: \" + getTrackMatteType(layer.trackMatteType) + \"\\n\";\n    }\n    \n    // Вывод информации в диалоговом окне\n    var dialog = new Window(\"dialog\", \"Информация о слое: \" + layer.name);\n    dialog.orientation = \"column\";\n    dialog.alignChildren = [\"fill\", \"top\"];\n    dialog.spacing = 10;\n    dialog.margins = 16;\n    \n    var infoGroup = dialog.add(\"group\");\n    infoGroup.orientation = \"column\";\n    infoGroup.alignChildren = [\"fill\", \"top\"];\n    \n    var infoText = infoGroup.add(\"edittext\", undefined, info, {multiline: true, scrollable: true});\n    infoText.preferredSize.width = 600;\n    infoText.preferredSize.height = 500;\n    \n    var btnGroup = dialog.add(\"group\");\n    btnGroup.orientation = \"row\";\n    btnGroup.alignChildren = [\"center\", \"center\"];\n    \n    var okBtn = btnGroup.add(\"button\", undefined, \"OK\");\n    var copyBtn = btnGroup.add(\"button\", undefined, \"Копировать\");\n    \n    copyBtn.onClick = function() {\n        infoText.active = true;\n        infoText.selectAll();\n        app.executeCommand(app.findMenuCommandId(\"Copy\"));\n        infoText.notify(\"onDeselect\");\n        alert(\"Информация скопирована в буфер обмена!\");\n    };\n    \n    okBtn.onClick = function() {\n        dialog.close();\n    };\n    \n    dialog.show();\n    \n    // Вспомогательные функции\n    function getLayerType(layer) {\n        if (layer instanceof TextLayer) return \"Текстовый слой\";\n        if (layer instanceof ShapeLayer) return \"Слой-фигура\";\n        if (layer instanceof LightLayer) return \"Слой-свет\";\n        if (layer instanceof CameraLayer) return \"Слой-камера\";\n        if (layer instanceof AVLayer) {\n            if (layer.source instanceof CompItem) return \"Прекомпозиция\";\n            if (layer.adjustmentLayer) return \"Корректирующий слой\";\n            if (layer.nullLayer) return \"Null-объект\";\n            if (layer.source instanceof SolidSource) return \"Сплошная заливка\";\n            return \"Слой аудио/видео\";\n        }\n        return \"Неизвестный тип\";\n    }\n    \n    function getPropertyValues(prop) {\n        try {\n            if (prop.value instanceof Array) {\n                // Для массивов значений (позиция, масштаб и т.д.)\n                if (prop.value.length === 2) {\n                    return \"[\" + Math.round(prop.value[0] * 1000) / 1000 + \", \" + Math.round(prop.value[1] * 1000) / 1000 + \"]\";\n                } else if (prop.value.length === 3) {\n                    return \"[\" + Math.round(prop.value[0] * 1000) / 1000 + \", \" + Math.round(prop.value[1] * 1000) / 1000 + \", \" + Math.round(prop.value[2] * 1000) / 1000 + \"]\";\n                }\n                return prop.value.toString();\n            } else {\n                // Для скалярных значений\n                return Math.round(prop.value * 1000) / 1000;\n            }\n        } catch (e) {\n            return \"Не удалось получить значение\";\n        }\n    }\n    \n    function getMaskMode(mode) {\n        switch (mode) {\n            case MaskMode.NONE: return \"Нет\";\n            case MaskMode.ADD: return \"Добавить\";\n            case MaskMode.SUBTRACT: return \"Вычесть\";\n            case MaskMode.INTERSECT: return \"Пересечение\";\n            case MaskMode.LIGHTEN: return \"Осветлить\";\n            case MaskMode.DARKEN: return \"Затемнить\";\n            case MaskMode.DIFFERENCE: return \"Разница\";\n            default: return \"Неизвестно\";\n        }\n    }\n    \n    function getQuality(quality) {\n        switch (quality) {\n            case LayerQuality.WIREFRAME: return \"Каркас\";\n            case LayerQuality.DRAFT: return \"Черновое\";\n            case LayerQuality.BEST: return \"Наилучшее\";\n            default: return \"Неизвестно\";\n        }\n    }\n    \n    function getBlendingMode(mode) {\n        switch (mode) {\n            case BlendingMode.NORMAL: return \"Нормальный\";\n            case BlendingMode.MULTIPLY: return \"Умножение\";\n            case BlendingMode.SCREEN: return \"Экран\";\n            case BlendingMode.OVERLAY: return \"Перекрытие\";\n            case BlendingMode.SOFT_LIGHT: return \"Мягкий свет\";\n            case BlendingMode.HARD_LIGHT: return \"Жесткий свет\";\n            case BlendingMode.COLOR_DODGE: return \"Осветление основы\";\n            case BlendingMode.COLOR_BURN: return \"Затемнение основы\";\n            case BlendingMode.DARKEN: return \"Затемнение\";\n            case BlendingMode.LIGHTEN: return \"Осветление\";\n            case BlendingMode.DIFFERENCE: return \"Разница\";\n            case BlendingMode.EXCLUSION: return \"Исключение\";\n            case BlendingMode.HUE: return \"Цветовой тон\";\n            case BlendingMode.SATURATION: return \"Насыщенность\";\n            case BlendingMode.COLOR: return \"Цвет\";\n            case BlendingMode.LUMINOSITY: return \"Яркость\";\n            case BlendingMode.ADD: return \"Добавление\";\n            case BlendingMode.ALPHA_ADD: return \"Добавление альфа\";\n            case BlendingMode.CLASSIC_COLOR_BURN: return \"Классическое затемнение основы\";\n            case BlendingMode.CLASSIC_COLOR_DODGE: return \"Классическое осветление основы\";\n            case BlendingMode.CLASSIC_DIFFERENCE: return \"Классическая разница\";\n            default: return \"Неизвестно\";\n        }\n    }\n    \n    function getTrackMatteType(type) {\n        switch (type) {\n            case TrackMatteType.ALPHA: return \"Альфа-подложка\";\n            case TrackMatteType.ALPHA_INVERTED: return \"Инвертированная альфа-подложка\";\n            case TrackMatteType.LUMA: return \"Яркостная подложка\";\n            case TrackMatteType.LUMA_INVERTED: return \"Инвертированная яркостная подложка\";\n            default: return \"Нет подложки\";\n        }\n    }\n    \n    function getMotionBlurType(motionBlur, isAdjustmentLayer) {\n        if (isAdjustmentLayer) {\n            return \"Не применимо (корректирующий слой)\";\n        } else {\n            return motionBlur ? \"Включено\" : \"Выключено\";\n        }\n    }\n    \n    function timeToFrames(time, frameRate) {\n        return Math.round(time * frameRate) + \" кадров\";\n    }\n    \n    function rgbToHex(rgbColor) {\n        try {\n            var r = Math.round(rgbColor[0] * 255);\n            var g = Math.round(rgbColor[1] * 255);\n            var b = Math.round(rgbColor[2] * 255);\n            return \"#\" + r.toString(16).padStart(2, \"0\") + \n                   g.toString(16).padStart(2, \"0\") + \n                   b.toString(16).padStart(2, \"0\");\n        } catch (e) {\n            return \"Не удалось получить цвет\";\n        }\n    }\n})();",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs"
    },
    {
      "name": "Create Folder",
      "description": "Creates a standard project folder structure ('Comp', 'Image', 'Video', 'Sound') for better organization.",
      "script": "// Скрипт для створення стандартної структури папок в проекті After Effects\n// © 2024 Gemini\n\n(function createProjectFolders() {\n    // Початок блокування змін в проекті, щоб прискорити виконання\n    app.beginUndoGroup(\"Створення папок проекту\");\n\n    // Масив з іменами папок, які потрібно створити\n    var folderNames = [\"Comp\", \"Image\", \"Video\", \"Sound\"];\n\n    // Цикл для створення кожної папки\n    for (var i = 0; i < folderNames.length; i++) {\n        var folderName = folderNames[i];\n        var folderExists = false;\n\n        // Перевірка, чи папка з таким іменем вже існує\n        for (var j = 1; j <= app.project.numItems; j++) {\n            if ((app.project.item(j) instanceof FolderItem) && (app.project.item(j).name === folderName)) {\n                folderExists = true;\n                break;\n            }\n        }\n\n        // Якщо папка не існує, створюємо її\n        if (!folderExists) {\n            app.project.items.addFolder(folderName);\n        }\n    }\n\n    // Завершення блокування змін і збереження історії дій\n    app.endUndoGroup();\n\n    // Повідомлення про успішне виконання (необов'язково)\n    //alert(\"Папки успішно створено!\");\n\n})();",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs"
    },
    {
      "name": "Sort File",
      "description": "Automatically sorts footage from the project root into the 'Video', 'Image', and 'Sound' folders.",
      "script": "// Скрипт для сортування файлів з кореня проекту (версія 2.0, надійна)\n// © 2024 Gemini\n\n(function organizeRootItemsStable() {\n\n    // Функція для пошуку папки за її назвою (залишається без змін)\n    function findFolder(name) {\n        for (var i = 1; i <= app.project.numItems; i++) {\n            if ((app.project.item(i) instanceof FolderItem) && (app.project.item(i).name === name)) {\n                return app.project.item(i);\n            }\n        }\n        return null;\n    }\n\n    app.beginUndoGroup(\"Стабільне сортування файлів з кореня\");\n\n    // Знаходимо папки призначення\n    var soundFolder = findFolder(\"Sound\");\n    var videoFolder = findFolder(\"Video\");\n    var imageFolder = findFolder(\"Image\");\n\n    // Перевіряємо, чи всі папки існують\n    if (!soundFolder || !videoFolder || !imageFolder) {\n        var missingFolders = [];\n        if (!soundFolder) missingFolders.push(\"Sound\");\n        if (!videoFolder) missingFolders.push(\"Video\");\n        if (!imageFolder) missingFolders.push(\"Image\");\n        alert(\"Помилка: Не знайдено папки для сортування.\\nБудь ласка, створіть папку(и): \" + missingFolders.join(\", \") + \".\");\n        app.endUndoGroup();\n        return;\n    }\n    \n    // --- ФАЗА 1: ЗБІР ЕЛЕМЕНТІВ ---\n    // Створюємо порожній масив, куди будемо складати елементи для переміщення\n    var itemsToMove = []; \n    \n    // Проходимо по всіх елементах проекту, щоб знайти потрібні\n    for (var i = 1; i <= app.project.numItems; i++) {\n        var currentItem = app.project.item(i);\n        \n        // Відбираємо тільки медіафайли (FootageItem), що лежать в корені і не є солідами\n        if (currentItem.parentFolder === app.project.rootFolder && currentItem instanceof FootageItem) {\n            if (!(currentItem.mainSource instanceof SolidSource)) {\n                itemsToMove.push(currentItem); // Додаємо знайдений елемент в наш список\n            }\n        }\n    }\n\n    // --- ФАЗА 2: ДІЯ (ПЕРЕМІЩЕННЯ) ---\n    var movedAudio = 0, movedVideo = 0, movedImage = 0;\n    \n    // Тепер проходимо по нашому власному, стабільному списку\n    for (var j = 0; j < itemsToMove.length; j++) {\n        var item = itemsToMove[j];\n        \n        // Визначаємо тип і переміщуємо. Ця логіка не змінилася.\n        if (item.mainSource.isStill) {\n            item.parentFolder = imageFolder;\n            movedImage++;\n        } else if (item.hasVideo) {\n            item.parentFolder = videoFolder;\n            movedVideo++;\n        } else if (item.hasAudio) {\n            item.parentFolder = soundFolder;\n            movedAudio++;\n        }\n    }\n\n    app.endUndoGroup();\n\n    // Фінальний звіт\n    if (movedAudio === 0 && movedVideo === 0 && movedImage === 0) {\n        alert(\"Сортування завершено.\\n\\nНе знайдено файлів для переміщення в корені проекту.\");\n    } else {\n        var report = \"Сортування успішно завершено!\\n\\n\";\n        report += \"Переміщено відео: \" + movedVideo + \"\\n\";\n        report += \"Переміщено зображень: \" + movedImage + \"\\n\";\n        report += \"Переміщено аудіо: \" + movedAudio + \"\\n\";\n        alert(report);\n    }\n    \n})();",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs"
    },
    {
      "name": "Font",
      "description": "Loads and displays data from a Google Sheet, showing a list of projects, fonts, and links in a dockable panel.",
      "script": "/**\n * Скрипт для завантаження даних з Google Таблиці.\n * Версія 4.0 (Найнадійніша версія з ручним розгортанням)\n * - Прибрано всі складні і нестабільні механізми.\n * - Додано кнопку \"Розгорнути\", яка надійно збільшує вікно до потрібного розміру по кліку.\n */\n\ntry {\n\n    (function buildAndShowWindow() {\n        // --- НАЛАШТУВАННЯ ---\n        var googleAppURL = \"https://script.google.com/macros/s/AKfycbxQoBphu0s7WXlr8dPxn1KtaWIDhGm4h1PRWdZUxkXHaR72MKzfU-iUhKll3y3cgb4HPA/exec\";\n        var expandedSize = [850, 650]; // [ширина, висота]\n        // --- КІНЕЦЬ НАЛАШТУВАНЬ ---\n\n        function createUI(thisObj) {\n            var pal = (thisObj instanceof Panel) ? thisObj : new Window(\"palette\", \"Дані з Google Таблиці (v4.0)\", undefined, { resizeable: true });\n            if (pal === null) return null;\n\n            var res =\n                \"group { \\\n                    orientation:'column', alignment:['fill','fill'], alignChildren:['fill','top'], spacing: 10, margin: [10,10,10,10], \\\n                    headerGroup: Group { \\\n                        orientation: 'row', alignment: ['fill', 'top'], \\\n                        title: StaticText { text:'Список проєктів та шрифтів:', alignment:['left','center'] }, \\\n                        expandButton: Button { text:'Розгорнути', alignment:['right','center'] }, \\\n                        refreshButton: Button { text:'Оновити', alignment:['right','center'] } \\\n                    }, \\\n                    mainList: ListBox { \\\n                        alignment:['fill','fill'], properties: { \\\n                            numberOfColumns: 3, showHeaders: true, \\\n                            columnTitles: ['Назва проєкту', 'Шрифт(и)', 'Посилання'], \\\n                            columnWidths: [250, 200, 300] \\\n                        } \\\n                    }, \\\n                    statusGroup: Group { \\\n                        orientation: 'row', alignment: ['fill', 'bottom'], \\\n                        statusText: StaticText { text:'Готово до роботи.', alignment:['fill','center'] } \\\n                    } \\\n                }\";\n\n            pal.grp = pal.add(res);\n\n            // Кнопка \"Розгорнути\"\n            pal.grp.headerGroup.expandButton.onClick = function() {\n                if (pal.size.toString() !== expandedSize.toString()) {\n                    pal.size = expandedSize;\n                    pal.layout.resize(); \n                }\n            };\n            \n            pal.grp.headerGroup.refreshButton.onClick = function() {\n                loadAndDisplayData(pal.grp.mainList, pal.grp.statusGroup.statusText, googleAppURL);\n            };\n            \n            pal.grp.mainList.onDoubleClick = function() {\n                var selection = this.selection;\n                if (selection === null) return;\n                var linkText = selection.subItems[1].text;\n                if (linkText.toLowerCase().indexOf('http') === 0) {\n                    try {\n                       var cmd = ($.os.indexOf(\"Windows\") > -1) ? \"cmd /c start \\\"\\\"\" : \"open\";\n                       system.callSystem(cmd + \" \\\"\" + linkText + \"\\\"\");\n                    } catch (e) { alert(\"Не вдалося відкрити посилання: \" + linkText); }\n                } else if (linkText !== \"\") {\n                    alert(\"Це не є валідним посиланням. Посилання має починатися з 'http://' або 'https://'.\");\n                }\n            };\n\n            pal.onResize = function () { this.layout.resize(); };\n            \n            return pal;\n        }\n\n        function loadAndDisplayData(listbox, status, url) {\n            if (url === \"ВСТАВТЕ_СЮДИ_ВАШУ_URL-АДРЕСУ_З_APPS_SCRIPT\" || url === \"\") {\n                alert(\"Помилка: Будь ласка, вставте URL-адресу веб-додатка у код скрипта.\"); return;\n            }\n            listbox.removeAll();\n            status.text = \"Завантаження даних...\";\n            var command = 'curl -s -L \"' + url + '\"';\n            var result = system.callSystem(command);\n            if (result) {\n                try {\n                    var data = JSON.parse(result);\n                    listbox.removeAll();\n                    for (var i = 0; i < data.length; i++) {\n                        var item = data[i];\n                        var projectName = item.projectName.replace(/\\n/g, \", \");\n                        var fontName = item.fontName.replace(/\\n/g, \", \");\n                        var newItem = listbox.add(\"item\", projectName);\n                        newItem.subItems[0].text = fontName;\n                        newItem.subItems[1].text = item.fontLink;\n                    }\n                    status.text = \"Завантажено \" + data.length + \" записів. Двічі клікніть по рядку, щоб відкрити посилання.\";\n                } catch (e) { status.text = \"Помилка розбору даних. Перевірте URL та формат таблиці.\"; }\n            } else { status.text = \"Помилка завантаження. Перевірте URL та інтернет-з'єднання.\"; }\n        }\n\n        var myPalette = createUI(this);\n        if (myPalette !== null) {\n            myPalette.center();\n            myPalette.show();\n            loadAndDisplayData(myPalette.grp.mainList, myPalette.grp.statusGroup.statusText, googleAppURL);\n        }\n\n    })();\n\n} catch (e) {\n    alert(\"Критична помилка в скрипті!\\n\\nПовідомлення: \" + e.message + \"\\nРядок: \" + e.line, \"Помилка виконання\");\n}",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs"
    },
    {
      "name": "Blur",
      "description": "Applies a 'Gaussian Blur' effect to the selected layer and animates its blurriness from 0 to 80 over 1 second with easing.",
      "script": "// Gaussian Blur Animation (0 to 80 за 1 сек с easing)\n// Скрипт для After Effects\n\n{\n    if (app.project && app.project.activeItem instanceof CompItem) {\n        var comp = app.project.activeItem;\n        var selectedLayers = comp.selectedLayers;\n        \n        if (selectedLayers.length > 0) {\n            app.beginUndoGroup(\"Gaussian Blur Animation\");\n            \n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n                \n                if (layer) {\n                    // Добавляем эффект Gaussian Blur\n                    var blurEffect = layer.Effects.addProperty(\"Gaussian Blur\");\n                    \n                    // Получаем свойство Blurriness\n                    var blurProp = blurEffect.property(\"Blurriness\");\n                    \n                    // Получаем время начала слоя\n                    var startTime = layer.inPoint;\n                    var endTime = startTime + 1.0; // 1 секунда\n                    \n                    // Устанавливаем первый ключ (0 в начале слоя)\n                    blurProp.setValueAtTime(startTime, 0);\n                    \n                    // Устанавливаем второй ключ (80 через 1 сек)\n                    blurProp.setValueAtTime(endTime, 80);\n                    \n                    // Находим индексы ключей\n                    var key1Index = blurProp.nearestKeyIndex(startTime);\n                    var key2Index = blurProp.nearestKeyIndex(endTime);\n                    \n                    // Применяем Easy Ease для обоих ключей\n                    var easeIn = new KeyframeEase(0, 33.33);\n                    var easeOut = new KeyframeEase(0, 33.33);\n                    \n                    // Настройка для первого ключа (только outgoing)\n                    blurProp.setTemporalEaseAtKey(key1Index, [easeOut], [easeOut]);\n                    \n                    // Настройка для второго ключа (только incoming)\n                    blurProp.setTemporalEaseAtKey(key2Index, [easeIn], [easeIn]);\n                }\n            }\n            \n            app.endUndoGroup();\n        }\n    }\n}",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs"
    },
    {
      "name": "FitToComp",
      "description": "Scales the selected layer to fit the composition's width and height, potentially changing its aspect ratio.",
      "script": "// Scale Layer to Comp Size (для всех типов слоев, включая Shape)\n// Скрипт для After Effects\n\n{\n    if (app.project && app.project.activeItem instanceof CompItem) {\n        var comp = app.project.activeItem;\n        var selectedLayers = comp.selectedLayers;\n        \n        if (selectedLayers.length > 0) {\n            app.beginUndoGroup(\"Scale Layer to Comp Size\");\n            \n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n                \n                if (layer.transform) {\n                    var compWidth = comp.width;\n                    var compHeight = comp.height;\n                    \n                    // Получаем границы слоя\n                    var bounds = layer.sourceRectAtTime(comp.time, false);\n                    \n                    if (bounds && bounds.width > 0 && bounds.height > 0) {\n                        // Устанавливаем якорную точку в центр слоя\n                        var anchorX = bounds.left + bounds.width / 2;\n                        var anchorY = bounds.top + bounds.height / 2;\n                        layer.transform.anchorPoint.setValue([anchorX, anchorY]);\n                        \n                        // Вычисляем коэффициенты масштабирования\n                        var scaleX = (compWidth / bounds.width) * 100;\n                        var scaleY = (compHeight / bounds.height) * 100;\n                        \n                        // Применяем масштабирование\n                        layer.transform.scale.setValue([scaleX, scaleY]);\n                        \n                        // Центрируем слой по горизонтали и вертикали в композиции\n                        layer.transform.position.setValue([compWidth / 2, compHeight / 2]);\n                    }\n                }\n            }\n            \n            app.endUndoGroup();\n        }\n    }\n}",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs"
    },
    {
      "name": "Horizontal",
      "description": "Scales the selected layer to fit the composition's width while maintaining its aspect ratio.",
      "script": "// Scale Layer to Comp Width (с сохранением пропорций)\n// Скрипт для After Effects\n\n{\n    if (app.project && app.project.activeItem instanceof CompItem) {\n        var comp = app.project.activeItem;\n        var selectedLayers = comp.selectedLayers;\n        \n        if (selectedLayers.length > 0) {\n            app.beginUndoGroup(\"Scale Layer to Comp Width\");\n            \n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n                \n                if (layer.transform) {\n                    var compWidth = comp.width;\n                    var compHeight = comp.height;\n                    \n                    // Получаем границы слоя\n                    var bounds = layer.sourceRectAtTime(comp.time, false);\n                    \n                    if (bounds && bounds.width > 0 && bounds.height > 0) {\n                        // Устанавливаем якорную точку в центр слоя\n                        var anchorX = bounds.left + bounds.width / 2;\n                        var anchorY = bounds.top + bounds.height / 2;\n                        layer.transform.anchorPoint.setValue([anchorX, anchorY]);\n                        \n                        // Вычисляем коэффициент масштабирования по ширине\n                        var scale = (compWidth / bounds.width) * 100;\n                        \n                        // Применяем одинаковое масштабирование для обеих осей (сохранение пропорций)\n                        layer.transform.scale.setValue([scale, scale]);\n                        \n                        // Центрируем слой по горизонтали и вертикали в композиции\n                        layer.transform.position.setValue([compWidth / 2, compHeight / 2]);\n                    }\n                }\n            }\n            \n            app.endUndoGroup();\n        }\n    }\n}",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs"
    },
    {
      "name": "Vertical",
      "description": "Scales the selected layer to fit the composition's height while maintaining its aspect ratio.",
      "script": "// Scale Layer to Comp Height (с сохранением пропорций)\n// Скрипт для After Effects\n\n{\n    if (app.project && app.project.activeItem instanceof CompItem) {\n        var comp = app.project.activeItem;\n        var selectedLayers = comp.selectedLayers;\n        \n        if (selectedLayers.length > 0) {\n            app.beginUndoGroup(\"Scale Layer to Comp Height\");\n            \n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n                \n                if (layer.transform) {\n                    var compWidth = comp.width;\n                    var compHeight = comp.height;\n                    \n                    // Получаем границы слоя\n                    var bounds = layer.sourceRectAtTime(comp.time, false);\n                    \n                    if (bounds && bounds.width > 0 && bounds.height > 0) {\n                        // Устанавливаем якорную точку в центр слоя\n                        var anchorX = bounds.left + bounds.width / 2;\n                        var anchorY = bounds.top + bounds.height / 2;\n                        layer.transform.anchorPoint.setValue([anchorX, anchorY]);\n                        \n                        // Вычисляем коэффициент масштабирования по высоте\n                        var scale = (compHeight / bounds.height) * 100;\n                        \n                        // Применяем одинаковое масштабирование для обеих осей (сохранение пропорций)\n                        layer.transform.scale.setValue([scale, scale]);\n                        \n                        // Центрируем слой по горизонтали и вертикали в композиции\n                        layer.transform.position.setValue([compWidth / 2, compHeight / 2]);\n                    }\n                }\n            }\n            \n            app.endUndoGroup();\n        }\n    }\n}",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs"
    },
    {
      "name": "In",
      "description": "Creates a fade-in animation for the selected layer by animating opacity from 0% to 100% over 0.5 seconds.",
      "script": "// Fade In Animation (0% to 100% opacity за 0.5 сек с easing)\n// Скрипт для After Effects\n\n{\n    if (app.project && app.project.activeItem instanceof CompItem) {\n        var comp = app.project.activeItem;\n        var selectedLayers = comp.selectedLayers;\n        \n        if (selectedLayers.length > 0) {\n            app.beginUndoGroup(\"Fade In Animation\");\n            \n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n                \n                if (layer.transform && layer.transform.opacity) {\n                    // Получаем время начала слоя\n                    var startTime = layer.inPoint;\n                    var endTime = startTime + 0.5; // 0.5 секунды\n                    \n                    var opacityProp = layer.transform.opacity;\n                    \n                    // Устанавливаем первый ключ (0% в начале слоя)\n                    opacityProp.setValueAtTime(startTime, 0);\n                    \n                    // Устанавливаем второй ключ (100% через 0.5 сек)\n                    opacityProp.setValueAtTime(endTime, 100);\n                    \n                    // Находим индексы ключей\n                    var key1Index = opacityProp.nearestKeyIndex(startTime);\n                    var key2Index = opacityProp.nearestKeyIndex(endTime);\n                    \n                    // Применяем Easy Ease для обоих ключей\n                    var easeIn = new KeyframeEase(0, 33.33);\n                    var easeOut = new KeyframeEase(0, 33.33);\n                    \n                    // Настройка для первого ключа (только outgoing)\n                    opacityProp.setTemporalEaseAtKey(key1Index, [easeOut], [easeOut]);\n                    \n                    // Настройка для второго ключа (только incoming)\n                    opacityProp.setTemporalEaseAtKey(key2Index, [easeIn], [easeIn]);\n                }\n            }\n            \n            app.endUndoGroup();\n        }\n    }\n}",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs"
    },
    {
      "name": "Out",
      "description": "Creates a fade-out animation for the selected layer by animating opacity from 100% to 0% over the last 0.5 seconds of the layer.",
      "script": "// Fade Out Animation (100% to 0% opacity за 0.5 сек с easing)\n// Скрипт для After Effects\n\n{\n    if (app.project && app.project.activeItem instanceof CompItem) {\n        var comp = app.project.activeItem;\n        var selectedLayers = comp.selectedLayers;\n        \n        if (selectedLayers.length > 0) {\n            app.beginUndoGroup(\"Fade Out Animation\");\n            \n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n                \n                if (layer.transform && layer.transform.opacity) {\n                    // Получаем время конца слоя\n                    var endTime = layer.outPoint;\n                    var startTime = endTime - 0.5; // 0.5 секунды до конца\n                    \n                    var opacityProp = layer.transform.opacity;\n                    \n                    // Устанавливаем первый ключ (100% за 0.5 сек до конца)\n                    opacityProp.setValueAtTime(startTime, 100);\n                    \n                    // Устанавливаем второй ключ (0% в конце слоя)\n                    opacityProp.setValueAtTime(endTime, 0);\n                    \n                    // Находим индексы ключей\n                    var key1Index = opacityProp.nearestKeyIndex(startTime);\n                    var key2Index = opacityProp.nearestKeyIndex(endTime);\n                    \n                    // Применяем Easy Ease для обоих ключей\n                    var easeIn = new KeyframeEase(0, 33.33);\n                    var easeOut = new KeyframeEase(0, 33.33);\n                    \n                    // Настройка для первого ключа (только outgoing)\n                    opacityProp.setTemporalEaseAtKey(key1Index, [easeOut], [easeOut]);\n                    \n                    // Настройка для второго ключа (только incoming)\n                    opacityProp.setTemporalEaseAtKey(key2Index, [easeIn], [easeIn]);\n                }\n            }\n            \n            app.endUndoGroup();\n        }\n    }\n}",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs"
    },
    {
      "name": "Center Anchor",
      "description": "Centers the anchor point in the selected layer's content.",
      "script": "app.executeCommand(app.findMenuCommandId(\"Center Anchor Point in Layer Content\"));",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs"
    },
    {
      "name": "Parent Link",
      "description": "Creates an advanced parent link using expressions that preserves the child layer's initial transform. The link can be toggled with a checkbox.",
      "script": "// Фінальний скрипт з динамічною прив'язкою без стрибків та із заморожуванням позиції\n// Автор: Gemini (на основі запиту користувача)\n\n(function createAdvancedParentLink() {\n    \n    app.beginUndoGroup(\"Розширена динамічна прив'язка\");\n\n    var activeComp = app.project.activeItem;\n    if (!activeComp || !(activeComp instanceof CompItem)) {\n        alert(\"Будь ласка, відкрийте композицію.\");\n        return;\n    }\n\n    var selectedLayer = activeComp.selectedLayers[0];\n    if (!selectedLayer) {\n        alert(\"Будь ласка, оберіть шар для прив'язки.\");\n        return;\n    }\n\n    // --- Створення UI ---\n    var dialog = new Window(\"dialog\", \"Прив'язка зі збереженням позиції\");\n    dialog.orientation = \"column\";\n    dialog.alignChildren = [\"fill\", \"top\"];\n    dialog.add(\"statictext\", undefined, \"Оберіть шар-батько:\");\n\n    var layerDropdown = dialog.add(\"dropdownlist\", undefined, []);\n    for (var i = 1; i <= activeComp.numLayers; i++) {\n        if (activeComp.layer(i).index !== selectedLayer.index) {\n            layerDropdown.add(\"item\", activeComp.layer(i).name);\n        }\n    }\n    layerDropdown.selection = 0;\n    \n    if (layerDropdown.items.length === 0) {\n        alert(\"У композиції немає інших шарів для прив'язки.\");\n        return;\n    }\n\n    var buttonGroup = dialog.add(\"group\");\n    buttonGroup.orientation = \"row\";\n    buttonGroup.alignment = [\"right\", \"top\"];\n    var okButton = buttonGroup.add(\"button\", undefined, \"Прив'язати\", { name: \"ok\" });\n    buttonGroup.add(\"button\", undefined, \"Скасувати\", { name: \"cancel\" });\n\n    // --- Основна логіка ---\n    okButton.onClick = function() {\n        if (!layerDropdown.selection) return;\n\n        var targetLayer = activeComp.layer(layerDropdown.selection.text);\n        if (!targetLayer) return;\n\n        var timeNow = activeComp.time;\n\n        // 1. Обчислюємо початкове зміщення (offset)\n        var posOffset = selectedLayer.transform.position.valueAtTime(timeNow, false) - targetLayer.transform.position.valueAtTime(timeNow, false);\n        var scaleOffset = selectedLayer.transform.scale.valueAtTime(timeNow, false) - targetLayer.transform.scale.valueAtTime(timeNow, false);\n        var rotOffset = 0;\n        \n        // Перевіряємо, чи є властивість Rotation (для 2D та 3D)\n        if (selectedLayer.transform.property(\"Rotation\")) {\n            rotOffset = selectedLayer.transform.rotation.valueAtTime(timeNow, false) - targetLayer.transform.rotation.valueAtTime(timeNow, false);\n        }\n\n        // 2. Додаємо Checkbox Control\n        var checkboxEffect = selectedLayer.property(\"Effects\").addProperty(\"ADBE Checkbox Control\");\n        checkboxEffect.name = \"Увімкнути прив'язку\";\n        checkboxEffect.property(\"Checkbox\").setValue(true);\n        var safeCheckboxName = JSON.stringify(checkboxEffect.name);\n\n        // 3. Створюємо та застосовуємо розумний вираз\n        var safeTargetName = JSON.stringify(targetLayer.name);\n        \n        var expressionTemplate = \n        '// --- Expression by Script ---\\n' +\n        'try {\\n' +\n        '    var target = thisComp.layer(%TARGET_NAME%);\\n' +\n        '    var checkbox = effect(%CHECKBOX_NAME%)(\"Checkbox\");\\n' +\n        '    \\n' +\n        '    if (checkbox.valueAtTime(time) == 1) {\\n' +\n        '        // Якщо чекбокс увімкнено, додаємо зміщення до позиції батька\\n' +\n        '        target.transform.position + [%POS_OFFSET%];\\n' +\n        '    } else {\\n' +\n        '        // Якщо вимкнено, шукаємо останній кадр, де він був увімкнений\\n' +\n        '        var t = time - thisComp.frameDuration;\\n' +\n        '        var lastOnTime = -1;\\n' +\n        '        while (t >= thisLayer.inPoint) {\\n' +\n        '            if (checkbox.valueAtTime(t) == 1) {\\n' +\n        '                lastOnTime = t;\\n' +\n        '                break;\\n' +\n        '            }\\n' +\n        '            t -= thisComp.frameDuration;\\n' +\n        '        }\\n' +\n        '        \\n' +\n        '        if (lastOnTime != -1) {\\n' +\n        '            // І повертаємо значення з того кадру (\\\"заморожуємо\\\" позицію)\\n' +\n        '            target.transform.position.valueAtTime(lastOnTime, false) + [%POS_OFFSET%];\\n' +\n        '        } else {\\n' +\n        '            // Якщо він ніколи не був увімкнений, повертаємо початкове значення\\n' +\n        '            value;\\n' +\n        '        }\\n' +\n        '    }\\n' +\n        '} catch (e) {\\n' +\n        '    value; // Безпека, якщо шар-батько видалено\\n' +\n        '}';\n\n        // Застосовуємо вираз до Position\n        var posExpression = expressionTemplate.replace(/%TARGET_NAME%/g, safeTargetName)\n                                            .replace(/%CHECKBOX_NAME%/g, safeCheckboxName)\n                                            .replace(/%POS_OFFSET%/g, posOffset.join(','));\n        selectedLayer.transform.position.expression = posExpression;\n\n        // Аналогічно для Scale\n        var scaleExpression = expressionTemplate.replace(/%TARGET_NAME%/g, safeTargetName)\n                                                .replace(/%CHECKBOX_NAME%/g, safeCheckboxName)\n                                                .replace(/%POS_OFFSET%/g, scaleOffset.join(','))\n                                                .replace(/position/g, 'scale'); // Замінюємо слово position на scale\n        selectedLayer.transform.scale.expression = scaleExpression;\n\n        // Аналогічно для Rotation\n        if (selectedLayer.transform.property(\"Rotation\")) {\n            var rotExpression = expressionTemplate.replace(/%TARGET_NAME%/g, safeTargetName)\n                                                  .replace(/%CHECKBOX_NAME%/g, safeCheckboxName)\n                                                  .replace(/\\[%POS_OFFSET%\\]/g, rotOffset) // Для обертання не потрібні дужки []\n                                                  .replace(/position/g, 'rotation');\n            selectedLayer.transform.rotation.expression = rotExpression;\n        }\n\n        dialog.close();\n    };\n\n    dialog.center();\n    dialog.show();\n    \n    app.endUndoGroup();\n\n})();",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs"
    },
    {
      "name": "Unlink",
      "description": "Removes all expressions and 'Checkbox Control' effects from selected layers, effectively unlinking them.",
      "script": "// Скрипт для видалення ВСІХ ефектів \"Checkbox Control\" з обраних шарів\n\n(function removeAllCheckboxControls() {\n\n    var activeComp = app.project.activeItem;\n    if (!activeComp || !(activeComp instanceof CompItem)) {\n        alert(\"Будь ласка, відкрийте композицію.\");\n        return;\n    }\n\n    var selectedLayers = activeComp.selectedLayers;\n    if (selectedLayers.length === 0) {\n        alert(\"Будь ласка, оберіть шар(и) для очищення.\");\n        return;\n    }\n\n    app.beginUndoGroup(\"Видалити всі Checkbox Controls\");\n\n    var cleanedLayersCount = 0;\n\n    for (var i = 0; i < selectedLayers.length; i++) {\n        var currentLayer = selectedLayers[i];\n        var wasCleaned = false;\n\n        // Видаляємо вирази з основних властивостей\n        currentLayer.transform.position.expression = \"\";\n        currentLayer.transform.scale.expression = \"\";\n        if (currentLayer.transform.property(\"Rotation\")) {\n            currentLayer.transform.rotation.expression = \"\";\n        }\n\n        // Знаходимо та видаляємо ВСІ чекбокси\n        var effects = currentLayer.property(\"Effects\");\n        for (var j = effects.numProperties; j >= 1; j--) {\n            var currentEffect = effects.property(j);\n            \n            // Перевіряємо тільки тип ефекту, ігноруючи назву\n            if (currentEffect.matchName === \"ADBE Checkbox Control\") {\n                currentEffect.remove();\n                wasCleaned = true;\n            }\n        }\n        if (wasCleaned) {\n            cleanedLayersCount++;\n        }\n    }\n\n    app.endUndoGroup();\n\n})();",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs"
    },
    {
      "name": "FixCompTran",
      "description": "Resizes a selected pre-comp to match the main composition's dimensions and centers the layer.",
      "script": "// Get the active composition\nvar activeComp = app.project.activeItem;\n\nif (activeComp && activeComp instanceof CompItem) {\n    // Get selected layers\n    var selectedLayers = activeComp.selectedLayers;\n\n    if (selectedLayers.length === 1 && selectedLayers[0].source instanceof CompItem) {\n        var preComp = selectedLayers[0].source;\n\n        // Disable undo history to make everything happen instantly\n        app.beginUndoGroup(\"Resize Precomposition\");\n\n        // Change the precomposition size to match the active composition size\n        preComp.width = activeComp.width;\n        preComp.height = activeComp.height;\n\n        // Fit the precomp layer to the composition\n        var preCompLayer = selectedLayers[0];\n        preCompLayer.property(\"Scale\").setValue([100,100]);\n        \n        // Center the layer\n        preCompLayer.property(\"Position\").setValue([activeComp.width/2, activeComp.height/2]);\n\n        // Complete the undo history\n        app.endUndoGroup();\n    } else {\n        alert(\"Please select exactly one precomposition layer.\");\n    }\n} else {\n    alert(\"No active composition found.\");\n}",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs"
    },
    {
      "name": "NewComp",
      "description": "Creates multiple compositions with different sizes (e.g., 16:9, 4:5, 9:16) and version numbers based on user input.",
      "script": "{\n    // Function to create dialog window\n    function showInputDialog() {\n        var dialog = new Window(\"dialog\", \"Composition Settings\");\n        dialog.orientation = \"column\";\n        \n        // Name and Duration in one line with separator\n        var nameDurationGroup = dialog.add(\"group\");\n        nameDurationGroup.orientation = \"row\";\n        nameDurationGroup.alignment = [\"fill\", \"center\"];\n        \n        // Name section\n        var nameGroup = nameDurationGroup.add(\"group\");\n        nameGroup.orientation = \"column\";\n        nameGroup.add(\"statictext\", undefined, \"Base name:\");\n        var nameInput = nameGroup.add(\"edittext\", undefined, \"MyComp\");\n        nameInput.characters = 20;\n        \n        // Vertical separator\n        nameDurationGroup.add(\"panel\", undefined, undefined, {borderStyle: \"etched\"});\n        \n        // Duration section\n        var durationGroup = nameDurationGroup.add(\"group\");\n        durationGroup.orientation = \"column\";\n        durationGroup.add(\"statictext\", undefined, \"Duration (sec):\");\n        var durationInput = durationGroup.add(\"edittext\", undefined, \"30\");\n        durationInput.characters = 5;\n\n        // Version checkboxes group\n        dialog.add(\"statictext\", undefined, \"Select versions to create:\");\n        var versionGroup = dialog.add(\"group\");\n        versionGroup.orientation = \"row\";\n        \n        var versions = [];\n        for (var v = 1; v <= 5; v++) {\n            versions[v-1] = versionGroup.add(\"checkbox\", undefined, \"v\"+v);\n            versions[v-1].value = false; // All unchecked by default\n        }\n\n        var buttonsGroup = dialog.add(\"group\");\n        buttonsGroup.orientation = \"row\";\n\n        var okButton = buttonsGroup.add(\"button\", undefined, \"OK\", { name: \"ok\" });\n        var cancelButton = buttonsGroup.add(\"button\", undefined, \"Cancel\", { name: \"cancel\" });\n\n        var result = dialog.show();\n\n        if (result == 1) {  // OK button\n            var selectedVersions = [];\n            for (var v = 0; v < 5; v++) {\n                if (versions[v].value) {\n                    selectedVersions.push(\"_v\"+(v+1));\n                }\n            }\n            \n            return {\n                duration: parseFloat(durationInput.text),\n                baseName: nameInput.text,\n                versions: selectedVersions.length > 0 ? selectedVersions : [\"\"] // Empty if no versions selected\n            };\n        } else {\n            return null;\n        }\n    }\n\n    // Script execution\n    app.beginUndoGroup(\"Create Multiple Compositions\");\n\n    var input = showInputDialog();\n\n    if (input != null) {\n        var compSettings = [\n            {width: 1920, height: 1080, suffix: \"_1920x1080\"},\n            {width: 1080, height: 1350, suffix: \"_1080x1350\"},\n            {width: 1080, height: 1920, suffix: \"_1080x1920\"}\n        ];\n\n        // Create compositions for each size and selected version\n        for (var i = 0; i < compSettings.length; i++) {\n            for (var v = 0; v < input.versions.length; v++) {\n                var versionSuffix = input.versions[v] === \"\" ? \"\" : input.versions[v];\n                var compName = input.baseName + compSettings[i].suffix + versionSuffix;\n                var comp = app.project.items.addComp(\n                    compName, \n                    compSettings[i].width, \n                    compSettings[i].height, \n                    1, \n                    input.duration, \n                    30\n                );\n                comp.openInViewer();\n            }\n        }\n    }\n\n    app.endUndoGroup();\n}",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs"
    },
    {
      "name": "Packshot_MT",
      "description": "Creates an adjustment layer with an animated transition using 'Gaussian Blur' and 'Lumetri Color' (Exposure).",
      "script": "(function() {\n    // First dialog - Duration and checkbox\n    var durationDialog = new Window(\"dialog\", \"Transition Settings\"); \n    durationDialog.orientation = \"column\";\n    durationDialog.alignChildren = [\"fill\", \"top\"];\n    durationDialog.spacing = 15;\n    durationDialog.margins = 15;\n    \n    // Duration input\n    var durationGroup = durationDialog.add(\"group\");\n    durationGroup.orientation = \"row\";\n    durationGroup.alignChildren = [\"left\", \"center\"];\n    durationGroup.add(\"statictext\", undefined, \"Transition duration (seconds):\");\n    var durationInput = durationGroup.add(\"edittext\", undefined, \"1.0\");\n    durationInput.characters = 6;\n    durationInput.active = true;\n    \n    // Custom values checkbox\n    var customCheckbox = durationDialog.add(\"checkbox\", undefined, \"Set custom effect values\");\n    \n    // Buttons\n    var btnGroup = durationDialog.add(\"group\");\n    btnGroup.orientation = \"row\";\n    btnGroup.alignment = [\"right\", \"center\"];\n    btnGroup.spacing = 10;\n    \n    var nextBtn = btnGroup.add(\"button\", undefined, \"Create\");\n    var cancelBtn = btnGroup.add(\"button\", undefined, \"Cancel\");\n    \n    // Store user choices\n    var userChoices = {\n        duration: 1.0,\n        useCustom: false,\n        blurValue: 100,\n        exposureValue: -2,\n        shouldCreate: false\n    };\n    \n    // First dialog handler\n    nextBtn.onClick = function() {\n        userChoices.duration = parseFloat(durationInput.text.toString().replace(',', '.')) || 1.0;\n        userChoices.useCustom = customCheckbox.value;\n        \n        if (userChoices.useCustom) {\n            durationDialog.hide();\n            showCustomValuesDialog();\n        } else {\n            userChoices.shouldCreate = true;\n            durationDialog.close();\n        }\n    };\n    \n    cancelBtn.onClick = function() {\n        durationDialog.close();\n    };\n    \n    // Second dialog for custom values\n    function showCustomValuesDialog() {\n        var valuesDialog = new Window(\"dialog\", \"Custom Effect Values\");\n        valuesDialog.orientation = \"column\";\n        valuesDialog.alignChildren = [\"fill\", \"top\"];\n        valuesDialog.spacing = 15;\n        valuesDialog.margins = 15;\n        \n        // Gaussian Blur settings\n        var blurGroup = valuesDialog.add(\"group\");\n        blurGroup.orientation = \"column\";\n        blurGroup.spacing = 5;\n        blurGroup.add(\"statictext\", undefined, \"Gaussian Blur End Value:\");\n        var blurInput = blurGroup.add(\"edittext\", undefined, \"100\");\n        blurInput.characters = 6;\n        \n        // Exposure settings\n        var exposureGroup = valuesDialog.add(\"group\");\n        exposureGroup.orientation = \"column\";\n        exposureGroup.spacing = 5;\n        exposureGroup.add(\"statictext\", undefined, \"Exposure End Value:\");\n        var exposureInput = exposureGroup.add(\"edittext\", undefined, \"-2\");\n        exposureInput.characters = 6;\n        \n        // Buttons\n        var valuesBtnGroup = valuesDialog.add(\"group\");\n        valuesBtnGroup.orientation = \"row\";\n        valuesBtnGroup.alignment = [\"right\", \"center\"];\n        valuesBtnGroup.spacing = 10;\n        \n        var createBtn = valuesBtnGroup.add(\"button\", undefined, \"Create\");\n        var closeBtn = valuesBtnGroup.add(\"button\", undefined, \"Close\");\n        \n        // Second dialog handlers\n        createBtn.onClick = function() {\n            userChoices.blurValue = parseFloat(blurInput.text.toString().replace(',', '.')) || 100;\n            userChoices.exposureValue = parseFloat(exposureInput.text.toString().replace(',', '.')) || -2;\n            userChoices.shouldCreate = true;\n            valuesDialog.close();\n            durationDialog.close();\n        };\n        \n        closeBtn.onClick = function() {\n            valuesDialog.close();\n            durationDialog.close();\n        };\n        \n        valuesDialog.show();\n    }\n    \n    // Show first dialog\n    durationDialog.show();\n    \n    // Only proceed if user clicked through to create\n    if (!userChoices.shouldCreate) return;\n    \n    // Get active composition\n    var comp = app.project.activeItem;\n    if (!comp || !(comp instanceof CompItem)) {\n        alert(\"Please open a composition first!\");\n        return;\n    }\n\n    // Time points\n    var startTime = comp.time;\n    var endTime = startTime + userChoices.duration;\n\n    // Create red adjustment layer\n    var solid = comp.layers.addSolid(\n        [1, 0, 0], // Red color\n        \"Lumetri+Blur Transition\", \n        comp.width, \n        comp.height, \n        1.0,\n        comp.duration\n    );\n    solid.startTime = startTime;\n    solid.adjustmentLayer = true;\n\n    // Add effects\n    var effects = solid.property(\"ADBE Effect Parade\");\n    \n    // 1. Gaussian Blur\n    var blur = effects.addProperty(\"ADBE Gaussian Blur 2\");\n    var blurParam = blur.property(\"ADBE Gaussian Blur 2-0001\"); // Blurriness\n    \n    // Set blur keyframes\n    blurParam.setValueAtTime(startTime, 0);\n    blurParam.setValueAtTime(endTime, userChoices.blurValue);\n    \n    // Apply Easy Ease to blur\n    applyEasyEase(blurParam);\n\n    // 2. Lumetri Color\n    var lumetri = effects.addProperty(\"ADBE Lumetri\");\n    var exposureParam = lumetri.property(\"ADBE Lumetri-0011\"); // Exposure\n    \n    // Set exposure keyframes\n    exposureParam.setValueAtTime(startTime, 0);\n    exposureParam.setValueAtTime(endTime, userChoices.exposureValue);\n    \n    // Apply Easy Ease to exposure\n    applyEasyEase(exposureParam);\n\n    // Move to start time\n    comp.time = startTime;\n    solid.selected = true;\n\n    alert(\"Transition created successfully!\\nDuration: \" + userChoices.duration + \" sec\\n\" +\n          \"Blur: 0 → \" + userChoices.blurValue + \"\\nExposure: 0 → \" + userChoices.exposureValue);\n\n    // Easy Ease function\n    function applyEasyEase(prop) {\n        if (prop.numKeys >= 2) {\n            for (var i = 1; i <= prop.numKeys; i++) {\n                prop.setInterpolationTypeAtKey(i, \n                    KeyframeInterpolationType.BEZIER, \n                    KeyframeInterpolationType.BEZIER);\n                prop.setTemporalEaseAtKey(i, \n                    [new KeyframeEase(0, 33)], \n                    [new KeyframeEase(0, 33)]);\n            }\n        }\n    }\n})();",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs"
    },
    {
      "name": "Audio_transit",
      "description": "Adds an audio fade-in to the selected layer, animating volume from -25dB to 0dB over 1 second.",
      "script": "(function() {\n    try {\n        // Проверка активной композиции\n        if (!app.project || !app.project.activeItem || !(app.project.activeItem instanceof CompItem)) {\n            alert(\"Пожалуйста, откройте композицию\", \"Ошибка\");\n            return;\n        }\n        var comp = app.project.activeItem;\n        \n        // Проверка выбранного слоя\n        if (!comp.selectedLayers || comp.selectedLayers.length === 0) {\n            alert(\"Пожалуйста, выберите слой с аудио\", \"Ошибка\");\n            return;\n        }\n        var layer = comp.selectedLayers[0];\n        \n        // Проверка наличия аудио\n        var hasAudio = false;\n        try {\n            hasAudio = layer.hasAudio;\n            if (!hasAudio) {\n                var audioProps = layer.property(\"ADBE Audio Properties\");\n                hasAudio = (audioProps !== null);\n            }\n        } catch(e) {\n            alert(\"Не удалось проверить аудио свойства слоя\", \"Ошибка\");\n            return;\n        }\n        \n        if (!hasAudio) {\n            alert(\"Выбранный слой не содержит аудио\", \"Ошибка\");\n            return;\n        }\n        \n        // Получение свойства уровня громкости\n        var audioLevels = null;\n        try {\n            audioLevels = layer.property(\"ADBE Audio Properties\").property(\"ADBE Audio Levels\");\n        } catch(e) {\n            try {\n                audioLevels = layer.property(\"Audio Levels\");\n            } catch(e) {\n                alert(\"Не удалось найти свойство уровня громкости\", \"Ошибка\");\n                return;\n            }\n        }\n        \n        // Установка ключей анимации\n        try {\n            // Используем inPoint вместо startTime для учета обрезанных слоев\n            var actualStartTime = layer.inPoint;\n            \n            // Удаление существующих ключей\n            if (audioLevels.numKeys > 0) {\n                if (!confirm(\"На слое уже есть ключи анимации. Заменить их?\")) {\n                    return;\n                }\n                while (audioLevels.numKeys > 0) {\n                    audioLevels.removeKey(1);\n                }\n            }\n            \n            // КОРРЕКТНАЯ установка ключей (массив из двух одинаковых значений)\n            audioLevels.setValueAtTime(actualStartTime, [-25, -25]); // Левый и правый канал\n            audioLevels.setValueAtTime(actualStartTime + 1, [0, 0]);   // Левый и правый канал\n            \n            alert(\"Анимация громкости успешно добавлена!\\nНачальное значение: -25 dB\\nЧерез 1 секунду: 0 dB\", \"Готово\");\n            \n        } catch(e) {\n            alert(\"Ошибка при установке ключей:\\n\" + e.toString(), \"Ошибка\");\n        }\n        \n    } catch(err) {\n        alert(\"Критическая ошибка:\\n\" + err.toString() + \"\\n\\nСтрока: \" + err.line, \"Ошибка скрипта\");\n    }\n})();",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs"
    },
    {
      "name": "TrueCompDublicator",
      "description": "Deep duplicates a composition, including all nested pre-comps, with advanced naming options.",
      "script": "// True Comp Duplicator (v6.3 - Fixed Deep Copy)\n// Цей скрипт коректно дублює всю ієрархію композицій з правильними назвами для всіх рівнів\n\n(function (thisObj) {\n\n    // --- БУДІВНИК ІНТЕРФЕЙСУ ---\n    function buildUI(thisObj) {\n        var win = (thisObj instanceof Panel) ? thisObj : new Window(\"palette\", \"True Comp Duplicator\", undefined, { resizeable: true });\n        win.orientation = \"column\";\n        win.alignChildren = [\"fill\", \"top\"];\n        win.spacing = 10;\n        win.margins = 15;\n\n        // --- Елементи керування ---\n        var namePanel = win.add(\"panel\", undefined, \"Налаштування назви\");\n        namePanel.alignChildren = [\"fill\", \"top\"];\n        var nameGroup = namePanel.add(\"group\");\n        nameGroup.orientation = \"row\";\n        var prefixRadio = nameGroup.add(\"radiobutton\", undefined, \"Префікс\");\n        var suffixRadio = nameGroup.add(\"radiobutton\", undefined, \"Суфікс\");\n        suffixRadio.value = true;\n        var nameInput = namePanel.add(\"edittext\", undefined, \"\");\n        nameInput.helpTip = \"Якщо залишити поле порожнім, буде додано '_copy' як суфікс або префікс.\";\n\n        var optionsPanel = win.add(\"panel\", undefined, \"Опції\");\n        optionsPanel.alignChildren = [\"left\", \"top\"];\n        var incrementCheck = optionsPanel.add(\"checkbox\", undefined, \"Інкрементне число в кінці\");\n        incrementCheck.value = true;\n        var copiesGroup = optionsPanel.add(\"group\");\n        copiesGroup.orientation = \"row\";\n        copiesGroup.add(\"statictext\", undefined, \"Кількість копій:\");\n        var copiesInput = copiesGroup.add(\"edittext\", undefined, \"1\");\n        copiesInput.characters = 4;\n\n        var runButton = win.add(\"button\", undefined, \"Дублювати\", { name: \"ok\" });\n        \n        // --- Обробник натискання ---\n        runButton.onClick = function () {\n            var activeComp = app.project.activeItem;\n            if (!activeComp || !(activeComp instanceof CompItem)) {\n                alert(\"Будь ласка, виберіть композицію в панелі Project.\");\n                return;\n            }\n            var numCopies = parseInt(copiesInput.text);\n            if (isNaN(numCopies) || numCopies < 1) {\n                alert(\"Будь ласка, введіть коректну кількість копій.\");\n                return;\n            }\n            \n            var settings = {\n                text: nameInput.text,\n                isPrefix: prefixRadio.value,\n                useIncrement: incrementCheck.value\n            };\n\n            app.beginUndoGroup(\"True Comp Duplicator\");\n            for (var i = 0; i < numCopies; i++) {\n                var duplicatedItemsMap = [];\n                var newComp = trueDuplicateRecursive(activeComp, duplicatedItemsMap, settings, i);\n            }\n            app.endUndoGroup();\n        };\n\n        win.layout.layout(true);\n        if (!(thisObj instanceof Panel)) win.show();\n    }\n\n    // --- ЯДРО СКРИПТА ---\n\n    /**\n     * Рекурсивна функція, яка створює глибоку копію \"на льоту\".\n     */\n    function trueDuplicateRecursive(compToDuplicate, map, settings, copyIndex) {\n        // 1. Перевіряємо, чи ми вже копіювали цей елемент\n        for (var i = 0; i < map.length; i++) {\n            if (map[i].original.id === compToDuplicate.id) {\n                return map[i].copy;\n            }\n        }\n\n        // 2. Створюємо копію\n        var newComp = compToDuplicate.duplicate();\n        \n        // 3. Генеруємо нове ім'я для копії\n        newComp.name = generateNewName(compToDuplicate.name, settings, copyIndex);\n        \n        // 4. Додаємо пару \"оригінал-копія\" в мапу ВІДРАЗУ\n        map.push({ original: compToDuplicate, copy: newComp });\n\n        // 5. Проходимо по шарах нової копії і замінюємо джерела\n        for (var layerIndex = 1; layerIndex <= newComp.numLayers; layerIndex++) {\n            var layer = newComp.layer(layerIndex);\n            \n            // Якщо це шар композиції\n            if (layer.source && layer.source instanceof CompItem) {\n                // Рекурсивно створюємо копію вкладеної композиції\n                var duplicatedSource = trueDuplicateRecursive(layer.source, map, settings, copyIndex);\n                \n                // ВАЖЛИВО: Замінюємо джерело шару на копію\n                layer.replaceSource(duplicatedSource, false);\n            }\n        }\n\n        return newComp;\n    }\n\n    /**\n     * Генерує фінальну назву.\n     */\n    function generateNewName(baseName, settings, copyIndex) {\n        var newName = baseName;\n        var textToApply = settings.text;\n        \n        // Якщо текст порожній, використовуємо \"_copy\"\n        if (textToApply === \"\") {\n            textToApply = \"_copy\";\n        }\n        \n        // Застосовуємо інкремент\n        if (settings.useIncrement) {\n            var regex = /(\\d+)$/;\n            var match = newName.match(regex);\n            if (match) {\n                var num = parseInt(match[1], 10);\n                var newNum = num + copyIndex + 1;\n                var numAsString = match[1];\n                var paddedNum = ('000000' + newNum).slice(-Math.max(numAsString.length, String(newNum).length));\n                newName = newName.replace(regex, paddedNum);\n            } else {\n                newName += \" \" + (copyIndex + 1);\n            }\n        }\n        \n        // Застосовуємо префікс/суфікс\n        if (settings.isPrefix) {\n            newName = textToApply + newName;\n        } else {\n            newName = newName + textToApply;\n        }\n        \n        return newName;\n    }\n\n    // Запускаємо скрипт\n    buildUI(thisObj);\n\n})(this);",
      "author": "S.Gridin",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs"
    }
  ]

}
