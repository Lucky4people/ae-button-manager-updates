{
  "buttons": [
    {
      "name": "ClearCache",
      "description": "Creates a panel to clear all memory & disk cache, purge RAM previews, and reopen project to clear glitches.",
      "youtubeUrl": "https://youtube.com/shorts/DPZGz1_5bXs",
      "gifUrl": "https://raw.githubusercontent.com/Lucky4people/ae-button-manager-updates/File/RCbanner_Play_TaurusXforanimator_gif.gif",
      "sliderImages": [
        "https://raw.githubusercontent.com/Lucky4people/ae-button-manager-updates/refs/heads/File/sliderImg/Screenshot%202025-09-21%20170836.png",
        "https://raw.githubusercontent.com/Lucky4people/ae-button-manager-updates/refs/heads/File/sliderImg/Screenshot%202025-09-21%20170920.png", 
        "https://raw.githubusercontent.com/Lucky4people/ae-button-manager-updates/refs/heads/File/sliderImg/Screenshot%202025-09-21%20171007.png"
      ],
      "script": "(function () {\n    var panelWindow = (this instanceof Panel) ? this : new Window(\"palette\", \"Cache & Project Cleaner\", undefined);\n    panelWindow.orientation = \"column\";\n    panelWindow.alignChildren = [\"center\", \"top\"];\n    panelWindow.spacing = 10;\n    panelWindow.margins = 16;\n\n    var titleText = panelWindow.add(\"statictext\", undefined, \"AE Cache & Project Tools\");\n    titleText.alignment = [\"center\", \"top\"];\n    try { titleText.graphics.font = ScriptUI.newFont(\"Arial\", \"BOLD\", 14); } catch (_) {}\n\n    var buttonGroup = panelWindow.add(\"group\", undefined);\n    buttonGroup.orientation = \"column\";\n    buttonGroup.alignChildren = [\"fill\", \"top\"];\n    buttonGroup.spacing = 8;\n    buttonGroup.margins = 0;\n\n    var allMemoryAndDiskCacheBtn = buttonGroup.add(\"button\", undefined, \"Purge All Memory & Disk Cache\");\n    var purgeRAMPreviewsBtn = buttonGroup.add(\"button\", undefined, \"Purge RAM Previews (Memory)\");\n    var reopenProjectBtn = buttonGroup.add(\"button\", undefined, \"Reopen Project (Clear Glitches)\");\n\n    var separator = panelWindow.add(\"panel\", undefined, undefined);\n    separator.alignment = [\"fill\", \"top\"];\n    separator.height = 2;\n\n    var statusText = panelWindow.add(\"statictext\", undefined, \"Ready\");\n    statusText.alignment = [\"center\", \"top\"];\n    statusText.preferredSize.width = 280;\n\n    function updateStatus(message, isError) {\n        statusText.text = message;\n        try {\n            var g = statusText.graphics;\n            var pen = g.newPen(g.PenType.SOLID_COLOR, isError ? [1, 0, 0] : [0, 0.6, 0], 1);\n            g.foregroundColor = pen;\n        } catch (_) {}\n    }\n\n    allMemoryAndDiskCacheBtn.onClick = function () {\n        try {\n            app.executeCommand(10200);\n            updateStatus(\"All Memory & Disk Cache Purged!\", false);\n        } catch (err) {\n            alert(\"Error (Btn1): \" + err.toString());\n            updateStatus(\"Error (Btn1): \" + err.toString(), true);\n        }\n    };\n\n    purgeRAMPreviewsBtn.onClick = function () {\n        try {\n            if (PurgeTarget && (PurgeTarget.ALL_MEMORY_CACHES !== undefined)) {\n                app.purge(PurgeTarget.ALL_MEMORY_CACHES);\n                updateStatus(\"RAM previews purged (memory cache).\", false);\n            } else {\n                app.purge(PurgeTarget.IMAGE_CACHES);\n                try { app.purge(PurgeTarget.SNAPSHOT_CACHES); } catch (_) {}\n                updateStatus(\"RAM previews purged (image/snapshot caches).\", false);\n            }\n        } catch (err) {\n            alert(\"Error (Btn2): \" + err.toString());\n            updateStatus(\"Error (Btn2): \" + err.toString(), true);\n        }\n    };\n\n    reopenProjectBtn.onClick = function () {\n        try {\n            if (!app.project) {\n                var msgNoProj = \"Error (Btn3): No project is open.\";\n                alert(msgNoProj);\n                updateStatus(msgNoProj, true);\n                return;\n            }\n\n            var currentProject = app.project;\n            var projectFile = currentProject.file;\n\n            if (!projectFile) {\n                var msgNeedSave = \"Error (Btn3): Project must be saved once. Please save and try again.\";\n                alert(msgNeedSave);\n                updateStatus(msgNeedSave, true);\n                return;\n            }\n\n            var projectPath = projectFile.fsName;\n            var projectName = projectFile.displayName;\n\n            updateStatus(\"Saving project: \" + projectName + \"...\", false);\n            currentProject.save();\n\n            updateStatus(\"Closing project: \" + projectName + \"...\", false);\n            app.beginSuppressDialogs();\n            currentProject.close(CloseOptions.DO_NOT_SAVE_CHANGES);\n\n            updateStatus(\"Reopening project: \" + projectName + \"...\", false);\n            var reopenedProject = app.open(new File(projectPath));\n\n            if (reopenedProject) {\n                updateStatus(\"Project reopened: \" + projectName, false);\n            } else {\n                var msgFail = \"Error (Btn3): Failed to reopen project \" + projectName;\n                alert(msgFail);\n                updateStatus(msgFail, true);\n            }\n\n            app.endSuppressDialogs(false);\n        } catch (err) {\n            try { app.endSuppressDialogs(false); } catch (_) {}\n            alert(\"Error (Btn3): \" + err.toString());\n            updateStatus(\"Error (Btn3): \" + err.toString(), true);\n        }\n    };\n\n    if (panelWindow instanceof Window) {\n        panelWindow.center();\n        panelWindow.show();\n    } else {\n        panelWindow.layout.layout(true);\n        panelWindow.layout.resize();\n    }\n})();",
      "author": "S.Gridin"
    },
    {
      "name": "INFO",
      "description": "Displays comprehensive information about the selected layer including transforms, effects, mask properties, and layer-specific details.",
      "script": "(function() {\n    if (app.project === null) {\n        alert(\"Please open a project!\");\n        return;\n    }\n    \n    if (app.project.activeItem === null || !(app.project.activeItem instanceof CompItem)) {\n        alert(\"Please select a composition!\");\n        return;\n    }\n    \n    if (app.project.activeItem.selectedLayers.length === 0) {\n        alert(\"Please select a layer!\");\n        return;\n    }\n    \n    var comp = app.project.activeItem;\n    var layer = comp.selectedLayers[0];\n    \n    var info = \"\";\n    \n    info += \"===== BASIC LAYER INFO =====\\n\";\n    info += \"Layer Name: \" + layer.name + \"\\n\";\n    info += \"Layer Index: \" + layer.index + \"\\n\";\n    info += \"Layer ID: \" + layer.id + \"\\n\";\n    info += \"Layer Type: \" + getLayerType(layer) + \"\\n\";\n    \n    info += \"\\n===== TIME INFO =====\\n\";\n    info += \"In Point: \" + timeToFrames(layer.inPoint, comp.frameRate) + \" (\" + layer.inPoint + \" sec)\\n\";\n    info += \"Out Point: \" + timeToFrames(layer.outPoint, comp.frameRate) + \" (\" + layer.outPoint + \" sec)\\n\";\n    info += \"Duration: \" + (layer.outPoint - layer.inPoint) + \" sec\\n\";\n    info += \"Start Time: \" + layer.startTime + \" sec\\n\";\n    \n    info += \"\\n===== TRANSFORMS =====\\n\";\n    info += \"Position: \" + getPropertyValues(layer.transform.position) + \"\\n\";\n    info += \"Scale: \" + getPropertyValues(layer.transform.scale) + \"%\\n\";\n    info += \"Rotation: \" + getPropertyValues(layer.transform.rotation) + \" degrees\\n\";\n    info += \"Opacity: \" + layer.transform.opacity.value + \"%\\n\";\n    \n    if (layer.transform.anchorPoint !== undefined) {\n        info += \"Anchor Point: \" + getPropertyValues(layer.transform.anchorPoint) + \"\\n\";\n    }\n    \n    if (layer.mask && layer.mask.numProperties > 0) {\n        info += \"\\n===== MASKS =====\\n\";\n        for (var i = 1; i <= layer.mask.numProperties; i++) {\n            var mask = layer.mask(i);\n            info += \"Mask \" + i + \": \" + mask.name + \", Mode: \" + getMaskMode(mask.maskMode) + \"\\n\";\n        }\n    }\n    \n    if (layer.effect && layer.effect.numProperties > 0) {\n        info += \"\\n===== EFFECTS =====\\n\";\n        for (var i = 1; i <= layer.effect.numProperties; i++) {\n            var effect = layer.effect(i);\n            info += \"Effect \" + i + \": \" + effect.name + \"\\n\";\n        }\n    }\n    \n    if (layer instanceof TextLayer || layer instanceof ShapeLayer) {\n        if (layer.layerStyle && layer.layerStyle.numProperties > 0) {\n            info += \"\\n===== LAYER STYLES =====\\n\";\n            for (var i = 1; i <= layer.layerStyle.numProperties; i++) {\n                var style = layer.layerStyle(i);\n                info += \"Style \" + i + \": \" + style.name + \"\\n\";\n            }\n        }\n    }\n    \n    if (layer instanceof TextLayer) {\n        info += \"\\n===== TEXT PROPERTIES =====\\n\";\n        try {\n            info += \"Content: \" + layer.text.sourceText.value + \"\\n\";\n        } catch (e) {\n            info += \"Content: [Could not retrieve]\\n\";\n        }\n        \n        try {\n            var textDoc = layer.text.sourceText.value;\n            info += \"Font: \" + textDoc.font + \"\\n\";\n            info += \"Font Size: \" + textDoc.fontSize + \"\\n\";\n            info += \"Text Color: \" + rgbToHex(textDoc.fillColor) + \"\\n\";\n        } catch (e) {\n            info += \"Could not retrieve additional text properties\\n\";\n        }\n    }\n    \n    if (layer instanceof AVLayer) {\n        info += \"\\n===== MEDIA PROPERTIES =====\\n\";\n        info += \"Source Name: \" + (layer.source ? layer.source.name : \"No source\") + \"\\n\";\n        \n        if (layer.source) {\n            if (layer.source instanceof FootageItem) {\n                info += \"Source Type: Footage\\n\";\n                info += \"Size: \" + layer.source.width + \"x\" + layer.source.height + \"\\n\";\n                info += \"Duration: \" + layer.source.duration + \" sec\\n\";\n                info += \"Frame Rate: \" + (layer.source.frameRate || \"N/A\") + \" fps\\n\";\n            } else if (layer.source instanceof CompItem) {\n                info += \"Source Type: Composition\\n\";\n                info += \"Size: \" + layer.source.width + \"x\" + layer.source.height + \"\\n\";\n                info += \"Duration: \" + layer.source.duration + \" sec\\n\";\n                info += \"Frame Rate: \" + layer.source.frameRate + \" fps\\n\";\n            }\n        }\n        \n        info += \"Quality: \" + getQuality(layer.quality) + \"\\n\";\n        info += \"Audio Enabled: \" + (layer.audioEnabled ? \"Yes\" : \"No\") + \"\\n\";\n        info += \"Visible: \" + (layer.enabled ? \"Yes\" : \"No\") + \"\\n\";\n        info += \"3D Layer: \" + (layer.threeDLayer ? \"Yes\" : \"No\") + \"\\n\";\n        info += \"Blending Mode: \" + getBlendingMode(layer.blendingMode) + \"\\n\";\n    }\n    \n    info += \"\\n===== SWITCHES =====\\n\";\n    info += \"Visible: \" + (layer.enabled ? \"Yes\" : \"No\") + \"\\n\";\n    info += \"Locked: \" + (layer.locked ? \"Yes\" : \"No\") + \"\\n\";\n    info += \"Shy: \" + (layer.shy ? \"Yes\" : \"No\") + \"\\n\";\n    info += \"Continuously Rasterize: \" + (layer.continuesRasterization ? \"Yes\" : \"No\") + \"\\n\";\n    info += \"Motion Blur: \" + getMotionBlurType(layer.motionBlur, layer.adjustmentLayer) + \"\\n\";\n    \n    if (layer.trackMatteType !== TrackMatteType.NO_TRACK_MATTE) {\n        info += \"Track Matte: \" + getTrackMatteType(layer.trackMatteType) + \"\\n\";\n    }\n    \n    var dialog = new Window(\"dialog\", \"Layer Info: \" + layer.name);\n    dialog.orientation = \"column\";\n    dialog.alignChildren = [\"fill\", \"top\"];\n    dialog.spacing = 10;\n    dialog.margins = 16;\n    \n    var infoGroup = dialog.add(\"group\");\n    infoGroup.orientation = \"column\";\n    infoGroup.alignChildren = [\"fill\", \"top\"];\n    \n    var infoText = infoGroup.add(\"edittext\", undefined, info, {multiline: true, scrollable: true});\n    infoText.preferredSize.width = 600;\n    infoText.preferredSize.height = 500;\n    \n    var btnGroup = dialog.add(\"group\");\n    btnGroup.orientation = \"row\";\n    btnGroup.alignChildren = [\"center\", \"center\"];\n    \n    var okBtn = btnGroup.add(\"button\", undefined, \"OK\");\n    var copyBtn = btnGroup.add(\"button\", undefined, \"Copy\");\n    \n    copyBtn.onClick = function() {\n        infoText.active = true;\n        infoText.selectAll();\n        app.executeCommand(app.findMenuCommandId(\"Copy\"));\n        infoText.notify(\"onDeselect\");\n        alert(\"Information copied to clipboard!\");\n    };\n    \n    okBtn.onClick = function() {\n        dialog.close();\n    };\n    \n    dialog.show();\n    \n    function getLayerType(layer) {\n        if (layer instanceof TextLayer) return \"Text Layer\";\n        if (layer instanceof ShapeLayer) return \"Shape Layer\";\n        if (layer instanceof LightLayer) return \"Light Layer\";\n        if (layer instanceof CameraLayer) return \"Camera Layer\";\n        if (layer instanceof AVLayer) {\n            if (layer.source instanceof CompItem) return \"Pre-composition\";\n            if (layer.adjustmentLayer) return \"Adjustment Layer\";\n            if (layer.nullLayer) return \"Null Object\";\n            if (layer.source instanceof SolidSource) return \"Solid\";\n            return \"AV Layer\";\n        }\n        return \"Unknown Type\";\n    }\n    \n    function getPropertyValues(prop) {\n        try {\n            if (prop.value instanceof Array) {\n                if (prop.value.length === 2) {\n                    return \"[\" + Math.round(prop.value[0] * 1000) / 1000 + \", \" + Math.round(prop.value[1] * 1000) / 1000 + \"]\";\n                } else if (prop.value.length === 3) {\n                    return \"[\" + Math.round(prop.value[0] * 1000) / 1000 + \", \" + Math.round(prop.value[1] * 1000) / 1000 + \", \" + Math.round(prop.value[2] * 1000) / 1000 + \"]\";\n                }\n                return prop.value.toString();\n            } else {\n                return Math.round(prop.value * 1000) / 1000;\n            }\n        } catch (e) {\n            return \"Could not retrieve value\";\n        }\n    }\n    \n    function getMaskMode(mode) {\n        switch (mode) {\n            case MaskMode.NONE: return \"None\";\n            case MaskMode.ADD: return \"Add\";\n            case MaskMode.SUBTRACT: return \"Subtract\";\n            case MaskMode.INTERSECT: return \"Intersect\";\n            case MaskMode.LIGHTEN: return \"Lighten\";\n            case MaskMode.DARKEN: return \"Darken\";\n            case MaskMode.DIFFERENCE: return \"Difference\";\n            default: return \"Unknown\";\n        }\n    }\n    \n    function getQuality(quality) {\n        switch (quality) {\n            case LayerQuality.WIREFRAME: return \"Wireframe\";\n            case LayerQuality.DRAFT: return \"Draft\";\n            case LayerQuality.BEST: return \"Best\";\n            default: return \"Unknown\";\n        }\n    }\n    \n    function getBlendingMode(mode) {\n        switch (mode) {\n            case BlendingMode.NORMAL: return \"Normal\";\n            case BlendingMode.MULTIPLY: return \"Multiply\";\n            case BlendingMode.SCREEN: return \"Screen\";\n            case BlendingMode.OVERLAY: return \"Overlay\";\n            case BlendingMode.SOFT_LIGHT: return \"Soft Light\";\n            case BlendingMode.HARD_LIGHT: return \"Hard Light\";\n            case BlendingMode.COLOR_DODGE: return \"Color Dodge\";\n            case BlendingMode.COLOR_BURN: return \"Color Burn\";\n            case BlendingMode.DARKEN: return \"Darken\";\n            case BlendingMode.LIGHTEN: return \"Lighten\";\n            case BlendingMode.DIFFERENCE: return \"Difference\";\n            case BlendingMode.EXCLUSION: return \"Exclusion\";\n            case BlendingMode.HUE: return \"Hue\";\n            case BlendingMode.SATURATION: return \"Saturation\";\n            case BlendingMode.COLOR: return \"Color\";\n            case BlendingMode.LUMINOSITY: return \"Luminosity\";\n            case BlendingMode.ADD: return \"Add\";\n            case BlendingMode.ALPHA_ADD: return \"Alpha Add\";\n            case BlendingMode.CLASSIC_COLOR_BURN: return \"Classic Color Burn\";\n            case BlendingMode.CLASSIC_COLOR_DODGE: return \"Classic Color Dodge\";\n            case BlendingMode.CLASSIC_DIFFERENCE: return \"Classic Difference\";\n            default: return \"Unknown\";\n        }\n    }\n    \n    function getTrackMatteType(type) {\n        switch (type) {\n            case TrackMatteType.ALPHA: return \"Alpha Matte\";\n            case TrackMatteType.ALPHA_INVERTED: return \"Alpha Inverted Matte\";\n            case TrackMatteType.LUMA: return \"Luma Matte\";\n            case TrackMatteType.LUMA_INVERTED: return \"Luma Inverted Matte\";\n            default: return \"No Matte\";\n        }\n    }\n    \n    function getMotionBlurType(motionBlur, isAdjustmentLayer) {\n        if (isAdjustmentLayer) {\n            return \"Not applicable (adjustment layer)\";\n        } else {\n            return motionBlur ? \"Enabled\" : \"Disabled\";\n        }\n    }\n    \n    function timeToFrames(time, frameRate) {\n        return Math.round(time * frameRate) + \" frames\";\n    }\n    \n    function rgbToHex(rgbColor) {\n        try {\n            var r = Math.round(rgbColor[0] * 255);\n            var g = Math.round(rgbColor[1] * 255);\n            var b = Math.round(rgbColor[2] * 255);\n            return \"#\" + r.toString(16).padStart(2, \"0\") + \n                   g.toString(16).padStart(2, \"0\") + \n                   b.toString(16).padStart(2, \"0\");\n        } catch (e) {\n            return \"Could not get color\";\n        }\n    }\n})();",
      "author": "S.Gridin"
    },
    {
      "name": "Create Folder",
      "description": "Creates a standard project folder structure ('Comp', 'Image', 'Video', 'Sound') for better organization.",
      "script": "(function createProjectFolders() {\n    app.beginUndoGroup(\"Create Project Folders\");\n\n    var folderNames = [\"Comp\", \"Image\", \"Video\", \"Sound\"];\n\n    for (var i = 0; i < folderNames.length; i++) {\n        var folderName = folderNames[i];\n        var folderExists = false;\n\n        for (var j = 1; j <= app.project.numItems; j++) {\n            if ((app.project.item(j) instanceof FolderItem) && (app.project.item(j).name === folderName)) {\n                folderExists = true;\n                break;\n            }\n        }\n\n        if (!folderExists) {\n            app.project.items.addFolder(folderName);\n        }\n    }\n\n    app.endUndoGroup();\n\n})();",
      "author": "S.Gridin"
    },
    {
      "name": "Sort File",
      "description": "Automatically sorts footage from the project root into the 'Video', 'Image', and 'Sound' folders based on file type.",
      "script": "(function organizeRootItemsStable() {\n\n    function findFolder(name) {\n        for (var i = 1; i <= app.project.numItems; i++) {\n            if ((app.project.item(i) instanceof FolderItem) && (app.project.item(i).name === name)) {\n                return app.project.item(i);\n            }\n        }\n        return null;\n    }\n\n    app.beginUndoGroup(\"Stable Sort Files from Root\");\n\n    var soundFolder = findFolder(\"Sound\");\n    var videoFolder = findFolder(\"Video\");\n    var imageFolder = findFolder(\"Image\");\n\n    if (!soundFolder || !videoFolder || !imageFolder) {\n        var missingFolders = [];\n        if (!soundFolder) missingFolders.push(\"Sound\");\n        if (!videoFolder) missingFolders.push(\"Video\");\n        if (!imageFolder) missingFolders.push(\"Image\");\n        alert(\"Error: Could not find folders for sorting.\\nPlease create folder(s): \" + missingFolders.join(\", \") + \".\");\n        app.endUndoGroup();\n        return;\n    }\n    \n    var itemsToMove = []; \n    \n    for (var i = 1; i <= app.project.numItems; i++) {\n        var currentItem = app.project.item(i);\n        \n        if (currentItem.parentFolder === app.project.rootFolder && currentItem instanceof FootageItem) {\n            if (!(currentItem.mainSource instanceof SolidSource)) {\n                itemsToMove.push(currentItem);\n            }\n        }\n    }\n\n    var movedAudio = 0, movedVideo = 0, movedImage = 0;\n    \n    for (var j = 0; j < itemsToMove.length; j++) {\n        var item = itemsToMove[j];\n        \n        if (item.mainSource.isStill) {\n            item.parentFolder = imageFolder;\n            movedImage++;\n        } else if (item.hasVideo) {\n            item.parentFolder = videoFolder;\n            movedVideo++;\n        } else if (item.hasAudio) {\n            item.parentFolder = soundFolder;\n            movedAudio++;\n        }\n    }\n\n    app.endUndoGroup();\n\n    if (movedAudio === 0 && movedVideo === 0 && movedImage === 0) {\n        alert(\"Sorting completed.\\n\\nNo files found for moving in project root.\");\n    } else {\n        var report = \"Sorting successfully completed!\\n\\n\";\n        report += \"Moved video: \" + movedVideo + \"\\n\";\n        report += \"Moved images: \" + movedImage + \"\\n\";\n        report += \"Moved audio: \" + movedAudio + \"\\n\";\n        alert(report);\n    }\n    \n})();",
      "author": "S.Gridin"
    },
    {
      "name": "Font",
      "description": "Loads and displays data from a Google Sheet, showing a list of projects, fonts, and links in a dockable panel.",
      "script": "try { (function buildAndShowWindow() { var googleAppURL = \"https://script.google.com/macros/s/AKfycbxQoBphu0s7WXlr8dPxn1KtaWIDhGm4h1PRWdZUxkXHaR72MKzfU-iUhKll3y3cgb4HPA/exec\"; var expandedSize = [850, 650]; function createUI(thisObj) { var pal = (thisObj instanceof Panel) ? thisObj : new Window(\"palette\", \"Data from Google Sheets (v4.0)\", undefined, { resizeable: true }); if (pal === null) return null; var res = \"group { \\ orientation:'column', alignment:['fill','fill'], alignChildren:['fill','top'], spacing: 10, margin: [10,10,10,10], \\ headerGroup: Group { \\ orientation: 'row', alignment: ['fill', 'top'], \\ title: StaticText { text:'List of projects and fonts:', alignment:['left','center'] }, \\ expandButton: Button { text:'Expand', alignment:['right','center'] }, \\ refreshButton: Button { text:'Refresh', alignment:['right','center'] } \\ }, \\ mainList: ListBox { \\ alignment:['fill','fill'], properties: { \\ numberOfColumns: 3, showHeaders: true, \\ columnTitles: ['Project Name', 'Font(s)', 'Link'], \\ columnWidths: [250, 200, 300] \\ } \\ }, \\ statusGroup: Group { \\ orientation: 'row', alignment: ['fill', 'bottom'], \\ statusText: StaticText { text:'Ready to work.', alignment:['fill','center'] } \\ } \\ }\"; pal.grp = pal.add(res); pal.grp.headerGroup.expandButton.onClick = function() { if (pal.size.toString() !== expandedSize.toString()) { pal.size = expandedSize; pal.layout.resize();  } }; pal.grp.headerGroup.refreshButton.onClick = function() { loadAndDisplayData(pal.grp.mainList, pal.grp.statusGroup.statusText, googleAppURL); }; pal.grp.mainList.onDoubleClick = function() { var selection = this.selection; if (selection === null) return; var linkText = selection.subItems[1].text; if (linkText.toLowerCase().indexOf('http') === 0) { try { var cmd = ($.os.indexOf(\"Windows\") > -1) ? \"cmd /c start \\\"\\\"\" : \"open\"; system.callSystem(cmd + \" \\\"\" + linkText + \"\\\"\"); } catch (e) { alert(\"Could not open link: \" + linkText); } } else if (linkText !== \"\") { alert(\"This is not a valid link. Link should start with 'http://' or 'https://'.\"); } }; pal.onResize = function () { this.layout.resize(); }; return pal; } function loadAndDisplayData(listbox, status, url) { if (url === \"INSERT_YOUR_URL_ADDRESS_FROM_APPS_SCRIPT\" || url === \"\") { alert(\"Error: Please insert the web app URL address in the script code.\"); return; } listbox.removeAll(); status.text = \"Loading data...\"; var command = 'curl -s -L \"' + url + '\"'; var result = system.callSystem(command); if (result) { try { var data = JSON.parse(result); listbox.removeAll(); for (var i = 0; i < data.length; i++) { var item = data[i]; var projectName = item.projectName.replace(/\\n/g, \", \"); var fontName = item.fontName.replace(/\\n/g, \", \"); var newItem = listbox.add(\"item\", projectName); newItem.subItems[0].text = fontName; newItem.subItems[1].text = item.fontLink; } status.text = \"Loaded \" + data.length + \" records. Double-click on a row to open link.\"; } catch (e) { status.text = \"Data parsing error. Check URL and table format.\"; } } else { status.text = \"Loading error. Check URL and internet connection.\"; } } var myPalette = createUI(this); if (myPalette !== null) { myPalette.center(); myPalette.show(); loadAndDisplayData(myPalette.grp.mainList, myPalette.grp.statusGroup.statusText, googleAppURL); } })(); } catch (e) { alert(\"Critical error in script!\\n\\nMessage: \" + e.message + \"\\nLine: \" + e.line, \"Execution Error\"); }",
      "author": "S.Gridin"
    },
    {
      "name": "Center Anchor",
      "description": "Centers the anchor point in the selected layer's content.",
      "script": "app.executeCommand(app.findMenuCommandId(\"Center Anchor Point in Layer Content\"));",
      "author": "S.Gridin"
    },
    {
      "name": "Blur_anim",
      "description": "Applies a 'Gaussian Blur' effect to the selected layer and animates its blurriness from 0 to 80 over 1 second with easing.",
      "script": "{\n    if (app.project && app.project.activeItem instanceof CompItem) {\n        var comp = app.project.activeItem;\n        var selectedLayers = comp.selectedLayers;\n        \n        if (selectedLayers.length > 0) {\n            app.beginUndoGroup(\"Gaussian Blur Animation\");\n            \n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n                \n                if (layer) {\n                    var blurEffect = layer.Effects.addProperty(\"Gaussian Blur\");\n                    \n                    var blurProp = blurEffect.property(\"Blurriness\");\n                    \n                    var startTime = layer.inPoint;\n                    var endTime = startTime + 1.0;\n                    \n                    blurProp.setValueAtTime(startTime, 0);\n                    \n                    blurProp.setValueAtTime(endTime, 80);\n                    \n                    var key1Index = blurProp.nearestKeyIndex(startTime);\n                    var key2Index = blurProp.nearestKeyIndex(endTime);\n                    \n                    var easeIn = new KeyframeEase(0, 33.33);\n                    var easeOut = new KeyframeEase(0, 33.33);\n                    \n                    blurProp.setTemporalEaseAtKey(key1Index, [easeOut], [easeOut]);\n                    \n                    blurProp.setTemporalEaseAtKey(key2Index, [easeIn], [easeIn]);\n                }\n            }\n            \n            app.endUndoGroup();\n        }\n    }\n}",
      "author": "S.Gridin"
    },
    {
      "name": "FitToComp",
      "description": "Scales the selected layer to fit the composition's width and height, potentially changing its aspect ratio.",
      "script": "{\n    if (app.project && app.project.activeItem instanceof CompItem) {\n        var comp = app.project.activeItem;\n        var selectedLayers = comp.selectedLayers;\n        \n        if (selectedLayers.length > 0) {\n            app.beginUndoGroup(\"Scale Layer to Comp Size\");\n            \n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n                \n                if (layer.transform) {\n                    var compWidth = comp.width;\n                    var compHeight = comp.height;\n                    \n                    var bounds = layer.sourceRectAtTime(comp.time, false);\n                    \n                    if (bounds && bounds.width > 0 && bounds.height > 0) {\n                        var anchorX = bounds.left + bounds.width / 2;\n                        var anchorY = bounds.top + bounds.height / 2;\n                        layer.transform.anchorPoint.setValue([anchorX, anchorY]);\n                        \n                        var scaleX = (compWidth / bounds.width) * 100;\n                        var scaleY = (compHeight / bounds.height) * 100;\n                        \n                        layer.transform.scale.setValue([scaleX, scaleY]);\n                        \n                        layer.transform.position.setValue([compWidth / 2, compHeight / 2]);\n                    }\n                }\n            }\n            \n            app.endUndoGroup();\n        }\n    }\n}",
      "author": "S.Gridin"
    },
    {
      "name": "Horizontal",
      "description": "Scales the selected layer to fit the composition's width while maintaining its aspect ratio.",
      "script": "{\n    if (app.project && app.project.activeItem instanceof CompItem) {\n        var comp = app.project.activeItem;\n        var selectedLayers = comp.selectedLayers;\n        \n        if (selectedLayers.length > 0) {\n            app.beginUndoGroup(\"Scale Layer to Comp Width\");\n            \n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n                \n                if (layer.transform) {\n                    var compWidth = comp.width;\n                    var compHeight = comp.height;\n                    \n                    var bounds = layer.sourceRectAtTime(comp.time, false);\n                    \n                    if (bounds && bounds.width > 0 && bounds.height > 0) {\n                        var anchorX = bounds.left + bounds.width / 2;\n                        var anchorY = bounds.top + bounds.height / 2;\n                        layer.transform.anchorPoint.setValue([anchorX, anchorY]);\n                        \n                        var scale = (compWidth / bounds.width) * 100;\n                        \n                        layer.transform.scale.setValue([scale, scale]);\n                        \n                        layer.transform.position.setValue([compWidth / 2, compHeight / 2]);\n                    }\n                }\n            }\n            \n            app.endUndoGroup();\n        }\n    }\n}",
      "author": "S.Gridin"
    },
    {
      "name": "Vertical",
      "description": "Scales the selected layer to fit the composition's height while maintaining its aspect ratio.",
      "script": "{\n    if (app.project && app.project.activeItem instanceof CompItem) {\n        var comp = app.project.activeItem;\n        var selectedLayers = comp.selectedLayers;\n        \n        if (selectedLayers.length > 0) {\n            app.beginUndoGroup(\"Scale Layer to Comp Height\");\n            \n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n                \n                if (layer.transform) {\n                    var compWidth = comp.width;\n                    var compHeight = comp.height;\n                    \n                    var bounds = layer.sourceRectAtTime(comp.time, false);\n                    \n                    if (bounds && bounds.width > 0 && bounds.height > 0) {\n                        var anchorX = bounds.left + bounds.width / 2;\n                        var anchorY = bounds.top + bounds.height / 2;\n                        layer.transform.anchorPoint.setValue([anchorX, anchorY]);\n                        \n                        var scale = (compHeight / bounds.height) * 100;\n                        \n                        layer.transform.scale.setValue([scale, scale]);\n                        \n                        layer.transform.position.setValue([compWidth / 2, compHeight / 2]);\n                    }\n                }\n            }\n            \n            app.endUndoGroup();\n        }\n    }\n}",
      "author": "S.Gridin"
    },
    {
      "name": "In",
      "description": "Creates a fade-in animation for the selected layer by animating opacity from 0% to 100% over 0.5 seconds.",
      "script": "{\n    if (app.project && app.project.activeItem instanceof CompItem) {\n        var comp = app.project.activeItem;\n        var selectedLayers = comp.selectedLayers;\n        \n        if (selectedLayers.length > 0) {\n            app.beginUndoGroup(\"Fade In Animation\");\n            \n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n                \n                if (layer.transform && layer.transform.opacity) {\n                    var startTime = layer.inPoint;\n                    var endTime = startTime + 0.5;\n                    \n                    var opacityProp = layer.transform.opacity;\n                    \n                    opacityProp.setValueAtTime(startTime, 0);\n                    \n                    opacityProp.setValueAtTime(endTime, 100);\n                    \n                    var key1Index = opacityProp.nearestKeyIndex(startTime);\n                    var key2Index = opacityProp.nearestKeyIndex(endTime);\n                    \n                    var easeIn = new KeyframeEase(0, 33.33);\n                    var easeOut = new KeyframeEase(0, 33.33);\n                    \n                    opacityProp.setTemporalEaseAtKey(key1Index, [easeOut], [easeOut]);\n                    \n                    opacityProp.setTemporalEaseAtKey(key2Index, [easeIn], [easeIn]);\n                }\n            }\n            \n            app.endUndoGroup();\n        }\n    }\n}",
      "author": "S.Gridin"
    },
    {
      "name": "Out",
      "description": "Creates a fade-out animation for the selected layer by animating opacity from 100% to 0% over the last 0.5 seconds of the layer.",
      "script": "{\n    if (app.project && app.project.activeItem instanceof CompItem) {\n        var comp = app.project.activeItem;\n        var selectedLayers = comp.selectedLayers;\n        \n        if (selectedLayers.length > 0) {\n            app.beginUndoGroup(\"Fade Out Animation\");\n            \n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n                \n                if (layer.transform && layer.transform.opacity) {\n                    var endTime = layer.outPoint;\n                    var startTime = endTime - 0.5;\n                    \n                    var opacityProp = layer.transform.opacity;\n                    \n                    opacityProp.setValueAtTime(startTime, 100);\n                    \n                    opacityProp.setValueAtTime(endTime, 0);\n                    \n                    var key1Index = opacityProp.nearestKeyIndex(startTime);\n                    var key2Index = opacityProp.nearestKeyIndex(endTime);\n                    \n                    var easeIn = new KeyframeEase(0, 33.33);\n                    var easeOut = new KeyframeEase(0, 33.33);\n                    \n                    opacityProp.setTemporalEaseAtKey(key1Index, [easeOut], [easeOut]);\n                    \n                    opacityProp.setTemporalEaseAtKey(key2Index, [easeIn], [easeIn]);\n                }\n            }\n            \n            app.endUndoGroup();\n        }\n    }\n}",
      "author": "S.Gridin"
    },
    {
      "name": "TrueCompDublicator",
      "description": "Deep duplicates a composition, including all nested pre-comps, with advanced naming options and version numbering.",
      "script": "(function() {\n    \n    if (!(app.project.activeItem instanceof CompItem)) {\n        alert(\"Please open a composition!\");\n        return;\n    }\n\n    var activeComp = app.project.activeItem;\n    var selectedLayers = activeComp.selectedLayers;\n    \n    if (selectedLayers.length === 0) {\n        alert(\"Please select a precomposition layer on the timeline!\");\n        return;\n    }\n\n    var selectedLayer = selectedLayers[0];\n    if (!selectedLayer.source || !(selectedLayer.source instanceof CompItem)) {\n        alert(\"Selected layer is not a precomposition!\");\n        return;\n    }\n\n    var win = new Window(\"dialog\", \"True Comp Duplicator\");\n    win.orientation = \"column\";\n    win.alignChildren = \"center\";\n    win.spacing = 12;\n    win.margins = 15;\n    win.preferredSize.width = 320;\n\n    var headerGroup = win.add(\"group\");\n    headerGroup.alignment = \"fill\";\n    headerGroup.spacing = 8;\n    \n    var sourceGroup = headerGroup.add(\"group\");\n    sourceGroup.alignment = \"left\";\n    sourceGroup.alignChildren = \"left\";\n    var iconText = sourceGroup.add(\"statictext\", undefined, \"📋\");\n    iconText.graphics.font = ScriptUI.newFont(\"Arial\", \"BOLD\", 14);\n    var infoText = sourceGroup.add(\"statictext\", undefined, \"Source: \" + selectedLayer.source.name);\n    infoText.graphics.font = ScriptUI.newFont(\"Arial\", \"REGULAR\", 11);\n\n    var separator = win.add(\"panel\");\n    separator.preferredSize.height = 1;\n    separator.alignment = \"fill\";\n\n    var settingsPanel = win.add(\"panel\", undefined, \"Settings\");\n    settingsPanel.orientation = \"column\";\n    settingsPanel.alignChildren = \"center\";\n    settingsPanel.margins = 12;\n    settingsPanel.spacing = 8;\n    settingsPanel.alignment = \"fill\";\n\n    var namingGroup = settingsPanel.add(\"group\");\n    namingGroup.orientation = \"column\";\n    namingGroup.alignChildren = \"center\";\n    \n    var radioGroup = namingGroup.add(\"group\");\n    radioGroup.spacing = 15;\n    var prefixRadio = radioGroup.add(\"radiobutton\", undefined, \"Add prefix\");\n    var suffixRadio = radioGroup.add(\"radiobutton\", undefined, \"Add suffix\");\n    suffixRadio.value = true;\n    \n    var previewGroup = namingGroup.add(\"group\");\n    previewGroup.alignChildren = \"center\";\n    var previewLabel = previewGroup.add(\"statictext\", undefined, \"Preview: \");\n    previewLabel.graphics.font = ScriptUI.newFont(\"Arial\", \"BOLD\", 10);\n    var previewText = previewGroup.add(\"statictext\", undefined, \"\");\n    previewText.graphics.font = ScriptUI.newFont(\"Arial\", \"BOLD\", 10);\n    previewText.graphics.foregroundColor = previewText.graphics.newPen(previewText.graphics.PenType.SOLID_COLOR, [0.2, 0.6, 1, 1], 1);\n    \n    var nameInputGroup = namingGroup.add(\"group\");\n    nameInputGroup.alignChildren = \"center\";\n    var nameLabel = nameInputGroup.add(\"statictext\", undefined, \"Text:\");\n    nameLabel.preferredSize.width = 35;\n    var nameInput = nameInputGroup.add(\"edittext\", undefined, \"_copy\");\n    nameInput.preferredSize.width = 100;\n    nameInput.active = true;\n\n    var copiesGroup = settingsPanel.add(\"group\");\n    copiesGroup.alignChildren = \"center\";\n    var copiesLabel = copiesGroup.add(\"statictext\", undefined, \"Copies:\");\n    copiesLabel.preferredSize.width = 50;\n    var copiesInput = copiesGroup.add(\"edittext\", undefined, \"1\");\n    copiesInput.preferredSize.width = 50;\n    copiesInput.justify = \"center\";\n\n    function updatePreview() {\n        var nameText = nameInput.text || \"_copy\";\n        var isPrefix = prefixRadio.value;\n        var copies = parseInt(copiesInput.text) || 1;\n        var originalName = selectedLayer.source.name;\n        \n        var preview = \"\";\n        for (var i = 0; i < Math.min(copies, 2); i++) {\n            var newName;\n            if (isPrefix) {\n                newName = nameText + originalName;\n            } else {\n                newName = originalName + nameText;\n            }\n            \n            if (i > 0) {\n                newName += \"_\" + (i + 1);\n            }\n            \n            preview += newName;\n            if (i < Math.min(copies, 2) - 1) {\n                preview += \", \";\n            }\n        }\n        \n        if (copies > 2) {\n            preview += \"...\";\n        }\n        \n        previewText.text = preview;\n    }\n\n    nameInput.onChanging = updatePreview;\n    copiesInput.onChanging = updatePreview;\n    prefixRadio.onClick = updatePreview;\n    suffixRadio.onClick = updatePreview;\n    \n    updatePreview();\n\n    var buttonGroup = win.add(\"group\");\n    buttonGroup.alignment = \"center\";\n    buttonGroup.margins = [0, 8, 0, 0];\n    \n    var duplicateBtn = buttonGroup.add(\"button\", undefined, \"Duplicate\");\n    duplicateBtn.preferredSize.width = 90;\n    duplicateBtn.fillBrush = duplicateBtn.graphics.newBrush(duplicateBtn.graphics.BrushType.SOLID_COLOR, [0.3, 0.6, 1, 1]);\n    \n    buttonGroup.add(\"statictext\", undefined, \"\");\n    \n    var cancelBtn = buttonGroup.add(\"button\", undefined, \"Cancel\");\n    cancelBtn.preferredSize.width = 90;\n\n    copiesInput.onChange = function() {\n        var value = parseInt(this.text);\n        if (isNaN(value) || value < 1) {\n            this.text = \"1\";\n        } else if (value > 50) {\n            this.text = \"50\";\n            alert(\"Maximum 50 copies allowed for performance reasons.\");\n        }\n        updatePreview();\n    };\n\n    cancelBtn.onClick = function() {\n        win.close();\n    };\n\n    duplicateBtn.onClick = function() {\n        var copies = parseInt(copiesInput.text);\n        if (isNaN(copies) || copies < 1) {\n            alert(\"Please enter a valid number of copies!\");\n            return;\n        }\n        \n        if (copies > 10) {\n            var proceed = confirm(\"You're about to create \" + copies + \" copies. This may take some time. Continue?\");\n            if (!proceed) return;\n        }\n        \n        var nameText = nameInput.text || \"_copy\";\n        var isPrefix = prefixRadio.value;\n        \n        win.close();\n        \n        app.beginUndoGroup(\"Duplicate Precomposition\");\n        \n        try {\n            var startTime = new Date().getTime();\n            \n            for (var i = 0; i < copies; i++) {\n                var duplicatedMap = {};\n                duplicateCompRecursive(selectedLayer.source, nameText, isPrefix, i, duplicatedMap);\n                \n                if (copies > 5 && (i + 1) % 5 === 0) {\n                    var progress = Math.round(((i + 1) / copies) * 100);\n                }\n            }\n            \n            var endTime = new Date().getTime();\n            var duration = ((endTime - startTime) / 1000).toFixed(1);\n            \n            alert(\"Successfully created \" + copies + \" \" + (copies === 1 ? \"copy\" : \"copies\") + \"!\\nTime elapsed: \" + duration + \" seconds\");\n            \n        } catch (e) {\n            alert(\"Error occurred: \" + e.toString());\n        }\n        \n        app.endUndoGroup();\n    };\n\n    win.center();\n    win.show();\n\n    function duplicateCompRecursive(comp, nameText, isPrefix, copyIndex, map) {\n        if (map[comp.id]) {\n            return map[comp.id];\n        }\n\n        var newName;\n        if (isPrefix) {\n            newName = nameText + comp.name;\n        } else {\n            newName = comp.name + nameText;\n        }\n        \n        if (copyIndex > 0) {\n            newName += \"_\" + (copyIndex + 1);\n        }\n\n        var newComp = app.project.items.addComp(\n            newName,\n            comp.width,\n            comp.height,\n            comp.pixelAspect,\n            comp.duration,\n            comp.frameRate\n        );\n\n        newComp.bgColor = comp.bgColor;\n        newComp.workAreaStart = comp.workAreaStart;\n        newComp.workAreaDuration = comp.workAreaDuration;\n        \n        try {\n            if (comp.displayStartTime !== undefined) {\n                newComp.displayStartTime = comp.displayStartTime;\n            }\n        } catch (e) {\n        }\n\n        map[comp.id] = newComp;\n\n        for (var i = comp.numLayers; i >= 1; i--) {\n            var originalLayer = comp.layer(i);\n            var newLayer;\n\n            try {\n                if (originalLayer.source instanceof CompItem) {\n                    var duplicatedSource = duplicateCompRecursive(originalLayer.source, nameText, isPrefix, copyIndex, map);\n                    newLayer = newComp.layers.add(duplicatedSource);\n                } else if (originalLayer.source) {\n                    newLayer = newComp.layers.add(originalLayer.source);\n                } else if (originalLayer.matchName === \"ADBE Text Layer\") {\n                    newLayer = newComp.layers.addText();\n                    if (originalLayer.property(\"ADBE Text Properties\").property(\"ADBE Text Document\")) {\n                        var textDoc = originalLayer.property(\"ADBE Text Properties\").property(\"ADBE Text Document\").value;\n                        newLayer.property(\"ADBE Text Properties\").property(\"ADBE Text Document\").setValue(textDoc);\n                    }\n                } else if (originalLayer.matchName === \"ADBE Vector Layer\") {\n                    newLayer = newComp.layers.addShape();\n                } else if (originalLayer.matchName === \"ADBE AV Layer\") {\n                    newLayer = newComp.layers.addSolid([1, 1, 1], originalLayer.name, comp.width, comp.height, comp.pixelAspect, comp.duration);\n                    newLayer.adjustmentLayer = true;\n                } else {\n                    continue;\n                }\n\n                newLayer.name = originalLayer.name;\n                newLayer.startTime = originalLayer.startTime;\n                newLayer.inPoint = originalLayer.inPoint;\n                newLayer.outPoint = originalLayer.outPoint;\n                newLayer.enabled = originalLayer.enabled;\n                newLayer.solo = originalLayer.solo;\n                newLayer.locked = originalLayer.locked;\n                newLayer.shy = originalLayer.shy;\n                newLayer.blendingMode = originalLayer.blendingMode;\n                \n                try {\n                    if (originalLayer.layerStyles) {\n                    }\n                } catch (e) {\n                }\n\n                copyTransform(originalLayer, newLayer);\n                copyEffects(originalLayer, newLayer);\n                \n            } catch (e) {\n                continue;\n            }\n        }\n\n        return newComp;\n    }\n\n    function copyTransform(fromLayer, toLayer) {\n        try {\n            var fromTransform = fromLayer.transform;\n            var toTransform = toLayer.transform;\n\n            copyProperty(fromTransform.position, toTransform.position);\n            copyProperty(fromTransform.anchorPoint, toTransform.anchorPoint);\n            copyProperty(fromTransform.scale, toTransform.scale);\n            copyProperty(fromTransform.rotation, toTransform.rotation);\n            copyProperty(fromTransform.opacity, toTransform.opacity);\n            \n            try {\n                if (fromLayer.threeDLayer) {\n                    toLayer.threeDLayer = true;\n                    copyProperty(fromTransform.xRotation, toTransform.xRotation);\n                    copyProperty(fromTransform.yRotation, toTransform.yRotation);\n                    copyProperty(fromTransform.orientation, toTransform.orientation);\n                }\n            } catch (e) {\n            }\n\n        } catch (e) {\n        }\n    }\n\n    function copyEffects(fromLayer, toLayer) {\n        try {\n            var fromEffects = fromLayer.property(\"ADBE Effect Parade\");\n            var toEffects = toLayer.property(\"ADBE Effect Parade\");\n            \n            if (fromEffects && fromEffects.numProperties > 0) {\n                for (var e = 1; e <= fromEffects.numProperties; e++) {\n                    var effect = fromEffects.property(e);\n                    var newEffect = toEffects.addProperty(effect.matchName);\n                    \n                    for (var p = 1; p <= effect.numProperties; p++) {\n                        try {\n                            var prop = effect.property(p);\n                            var newProp = newEffect.property(p);\n                            copyProperty(prop, newProp);\n                        } catch (e) {\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n        }\n    }\n\n    function copyProperty(fromProp, toProp) {\n        try {\n            if (!fromProp || !toProp) return;\n            \n            if (fromProp.numKeys > 0) {\n                for (var k = 1; k <= fromProp.numKeys; k++) {\n                    var keyTime = fromProp.keyTime(k);\n                    var keyValue = fromProp.keyValue(k);\n                    \n                    toProp.setValueAtTime(keyTime, keyValue);\n                    \n                    try {\n                        var inInterp = fromProp.keyInInterpolationType(k);\n                        var outInterp = fromProp.keyOutInterpolationType(k);\n                        toProp.setInterpolationTypeAtKey(k, inInterp, outInterp);\n                        \n                        if (inInterp === KeyframeInterpolationType.BEZIER || outInterp === KeyframeInterpolationType.BEZIER) {\n                            var inTangent = fromProp.keyInTemporalEase(k);\n                            var outTangent = fromProp.keyOutTemporalEase(k);\n                            toProp.setTemporalEaseAtKey(k, inTangent, outTangent);\n                        }\n                    } catch (e) {\n                    }\n                }\n            } else {\n                toProp.setValue(fromProp.value);\n            }\n        } catch (e) {\n        }\n    }\n\n})();",
      "author": "S.Gridin"
    },
    {
      "name": "Create shape & text",
      "description": "Creates a text layer with dynamic background shape that automatically adjusts size based on text content.",
      "script": "(function() {\n    app.beginUndoGroup(\"Create Dynamic Text Box v5\");\n\n    var comp = app.project.activeItem;\n    if (!comp || !(comp instanceof CompItem)) {\n        comp = app.project.items.addComp(\"Dynamic Box\", 1920, 1080, 1, 10, 25);\n    }\n    comp.openInViewer();\n\n    var shapeLayer = comp.layers.addShape();\n    shapeLayer.name = \"Background\";\n\n    var textLayer = comp.layers.addText(\"Now it works\");\n    textLayer.name = \"Source Text\";\n    textLayer.property(\"Transform\").property(\"Position\").setValue([comp.width / 2, comp.height / 2]);\n\n    var effects = shapeLayer.property(\"Effects\");\n\n    var paddingSlider = effects.addProperty(\"ADBE Slider Control\");\n    paddingSlider.name = \"Distance\";\n    paddingSlider.property(\"Slider\").setValue(40);\n\n    var roundnessSlider = effects.addProperty(\"ADBE Slider Control\");\n    roundnessSlider.name = \"Border Radius\";\n    roundnessSlider.property(\"Slider\").setValue(20);\n    \n    var sizeController = effects.addProperty(\"ADBE Point Control\");\n    sizeController.name = \"Base Text Size\";\n    sizeController.property(\"Point\").expression = 'tgt=thisComp.layer(thisLayer.index-1);r=tgt.sourceRectAtTime(time,false);[r.width,r.height];';\n    sizeController.enabled = false;\n\n    var shapeContents = shapeLayer.property(\"Contents\");\n    var group = shapeContents.addProperty(\"ADBE Vector Group\");\n    var rect = group.property(\"Contents\").addProperty(\"ADBE Vector Shape - Rect\");\n    var fill = group.property(\"Contents\").addProperty(\"ADBE Vector Graphic - Fill\");\n    fill.property(\"Color\").setValue([0.2, 0.2, 0.2]);\n\n    shapeLayer.property(\"Transform\").property(\"Position\").expression = 'thisComp.layer(thisLayer.index - 1).transform.position;';\n        \n    rect.property(\"Size\").expression = 'base=effect(\"Base Text Size\")(\"Point\");pad=effect(\"Distance\")(\"Slider\");base+[pad*2,pad*2];';\n    \n    rect.property(\"Roundness\").expression = 'effect(\"Border Radius\")(\"Slider\");';\n\n    app.endUndoGroup();\n})();",
      "author": "S.Gridin"
    },
    {
      "name": "Parent Link",
      "description": "Creates an advanced parent link using expressions that preserves the child layer's initial transform. The link can be toggled with a checkbox.",
      "script": "(function createAdvancedParentLink() {\n    \n    app.beginUndoGroup(\"Advanced Dynamic Parent Link\");\n\n    var activeComp = app.project.activeItem;\n    if (!activeComp || !(activeComp instanceof CompItem)) {\n        alert(\"Please open a composition.\");\n        return;\n    }\n\n    var selectedLayer = activeComp.selectedLayers[0];\n    if (!selectedLayer) {\n        alert(\"Please select a layer to link.\");\n        return;\n    }\n\n    var dialog = new Window(\"dialog\", \"Parent Link with Preserved Position\");\n    dialog.orientation = \"column\";\n    dialog.alignChildren = [\"fill\", \"top\"];\n    dialog.add(\"statictext\", undefined, \"Select parent layer:\");\n\n    var layerDropdown = dialog.add(\"dropdownlist\", undefined, []);\n    for (var i = 1; i <= activeComp.numLayers; i++) {\n        if (activeComp.layer(i).index !== selectedLayer.index) {\n            layerDropdown.add(\"item\", activeComp.layer(i).name);\n        }\n    }\n    layerDropdown.selection = 0;\n    \n    if (layerDropdown.items.length === 0) {\n        alert(\"No other layers available for parenting.\");\n        return;\n    }\n\n    var buttonGroup = dialog.add(\"group\");\n    buttonGroup.orientation = \"row\";\n    buttonGroup.alignment = [\"right\", \"top\"];\n    var okButton = buttonGroup.add(\"button\", undefined, \"Link\", { name: \"ok\" });\n    buttonGroup.add(\"button\", undefined, \"Cancel\", { name: \"cancel\" });\n\n    okButton.onClick = function() {\n        if (!layerDropdown.selection) return;\n\n        var targetLayer = activeComp.layer(layerDropdown.selection.text);\n        if (!targetLayer) return;\n\n        var timeNow = activeComp.time;\n\n        var posOffset = selectedLayer.transform.position.valueAtTime(timeNow, false) - targetLayer.transform.position.valueAtTime(timeNow, false);\n        var scaleOffset = selectedLayer.transform.scale.valueAtTime(timeNow, false) - targetLayer.transform.scale.valueAtTime(timeNow, false);\n        var rotOffset = 0;\n        \n        if (selectedLayer.transform.property(\"Rotation\")) {\n            rotOffset = selectedLayer.transform.rotation.valueAtTime(timeNow, false) - targetLayer.transform.rotation.valueAtTime(timeNow, false);\n        }\n\n        var checkboxEffect = selectedLayer.property(\"Effects\").addProperty(\"ADBE Checkbox Control\");\n        checkboxEffect.name = \"Enable Link\";\n        checkboxEffect.property(\"Checkbox\").setValue(true);\n        var safeCheckboxName = JSON.stringify(checkboxEffect.name);\n\n        var safeTargetName = JSON.stringify(targetLayer.name);\n        \n        var expressionTemplate = \n        'try {\\n' +\n        '    var target = thisComp.layer(%TARGET_NAME%);\\n' +\n        '    var checkbox = effect(%CHECKBOX_NAME%)(\"Checkbox\");\\n' +\n        '    \\n' +\n        '    if (checkbox.valueAtTime(time) == 1) {\\n' +\n        '        target.transform.position + [%POS_OFFSET%];\\n' +\n        '    } else {\\n' +\n        '        var t = time - thisComp.frameDuration;\\n' +\n        '        var lastOnTime = -1;\\n' +\n        '        while (t >= thisLayer.inPoint) {\\n' +\n        '            if (checkbox.valueAtTime(t) == 1) {\\n' +\n        '                lastOnTime = t;\\n' +\n        '                break;\\n' +\n        '            }\\n' +\n        '            t -= thisComp.frameDuration;\\n' +\n        '        }\\n' +\n        '        \\n' +\n        '        if (lastOnTime != -1) {\\n' +\n        '            target.transform.position.valueAtTime(lastOnTime, false) + [%POS_OFFSET%];\\n' +\n        '        } else {\\n' +\n        '            value;\\n' +\n        '        }\\n' +\n        '    }\\n' +\n        '} catch (e) {\\n' +\n        '    value;\\n' +\n        '}';\n\n        var posExpression = expressionTemplate.replace(/%TARGET_NAME%/g, safeTargetName)\n                                            .replace(/%CHECKBOX_NAME%/g, safeCheckboxName)\n                                            .replace(/%POS_OFFSET%/g, posOffset.join(','));\n        selectedLayer.transform.position.expression = posExpression;\n\n        var scaleExpression = expressionTemplate.replace(/%TARGET_NAME%/g, safeTargetName)\n                                                .replace(/%CHECKBOX_NAME%/g, safeCheckboxName)\n                                                .replace(/%POS_OFFSET%/g, scaleOffset.join(','))\n                                                .replace(/position/g, 'scale');\n        selectedLayer.transform.scale.expression = scaleExpression;\n\n        if (selectedLayer.transform.property(\"Rotation\")) {\n            var rotExpression = expressionTemplate.replace(/%TARGET_NAME%/g, safeTargetName)\n                                                  .replace(/%CHECKBOX_NAME%/g, safeCheckboxName)\n                                                  .replace(/\\[%POS_OFFSET%\\]/g, rotOffset)\n                                                  .replace(/position/g, 'rotation');\n            selectedLayer.transform.rotation.expression = rotExpression;\n        }\n\n        dialog.close();\n    };\n\n    dialog.center();\n    dialog.show();\n    \n    app.endUndoGroup();\n\n})();",
      "author": "S.Gridin"
    },
    {
      "name": "Unlink",
      "description": "Removes all expressions and 'Checkbox Control' effects from selected layers, effectively unlinking them.",
      "script": "(function removeAllCheckboxControls() {\n\n    var activeComp = app.project.activeItem;\n    if (!activeComp || !(activeComp instanceof CompItem)) {\n        alert(\"Please open a composition.\");\n        return;\n    }\n\n    var selectedLayers = activeComp.selectedLayers;\n    if (selectedLayers.length === 0) {\n        alert(\"Please select layer(s) to clean.\");\n        return;\n    }\n\n    app.beginUndoGroup(\"Remove All Checkbox Controls\");\n\n    var cleanedLayersCount = 0;\n\n    for (var i = 0; i < selectedLayers.length; i++) {\n        var currentLayer = selectedLayers[i];\n        var wasCleaned = false;\n\n        currentLayer.transform.position.expression = \"\";\n        currentLayer.transform.scale.expression = \"\";\n        if (currentLayer.transform.property(\"Rotation\")) {\n            currentLayer.transform.rotation.expression = \"\";\n        }\n\n        var effects = currentLayer.property(\"Effects\");\n        for (var j = effects.numProperties; j >= 1; j--) {\n            var currentEffect = effects.property(j);\n            \n            if (currentEffect.matchName === \"ADBE Checkbox Control\") {\n                currentEffect.remove();\n                wasCleaned = true;\n            }\n        }\n        if (wasCleaned) {\n            cleanedLayersCount++;\n        }\n    }\n\n    app.endUndoGroup();\n\n})();",
      "author": "S.Gridin"
    },
    {
      "name": "Gaussian Blur 80",
      "description": "Applies a Gaussian Blur effect with blurriness set to 80 pixels to selected layers.",
      "script": "(function() {\n    app.beginUndoGroup(\"Apply effects from 'Adjustment Layer 1'\");\n    try {\n        var comp = app.project.activeItem;\n        if (!comp || !(comp instanceof CompItem)) {\n            alert(\"Please select a composition.\");\n            return;\n        }\n        var selectedLayers = comp.selectedLayers;\n        if (selectedLayers.length === 0) {\n            alert(\"Please select a layer to apply effects to.\");\n            return;\n        }\n        \n        for (var i = 0; i < selectedLayers.length; i++) {\n            var targetLayer = selectedLayers[i];\n\n            var effect_ADBE_Gaussian_Blur_2 = targetLayer.property(\"Effects\").addProperty(\"ADBE Gaussian Blur 2\");\n\n            try {\n                effect_ADBE_Gaussian_Blur_2.property(\"ADBE Gaussian Blur 2-0001\").setValue(80);\n            } catch(e) { }\n\n            try {\n                effect_ADBE_Gaussian_Blur_2.property(\"ADBE Gaussian Blur 2-0002\").setValue(1);\n            } catch(e) { }\n\n            try {\n                effect_ADBE_Gaussian_Blur_2.property(\"ADBE Gaussian Blur 2-0003\").setValue(1);\n            } catch(e) { }\n\n        }\n    } catch (e) {\n        alert(\"An error occurred: \" + e.toString());\n    } finally {\n        app.endUndoGroup();\n    }\n})();",
      "author": "S.Gridin"
    },
    {
      "name": "FixCompTran",
      "description": "Resizes a selected pre-comp to match the main composition's dimensions and centers the layer.",
      "script": "var activeComp = app.project.activeItem;\n\nif (activeComp && activeComp instanceof CompItem) {\n    var selectedLayers = activeComp.selectedLayers;\n\n    if (selectedLayers.length === 1 && selectedLayers[0].source instanceof CompItem) {\n        var preComp = selectedLayers[0].source;\n\n        app.beginUndoGroup(\"Resize Precomposition\");\n\n        preComp.width = activeComp.width;\n        preComp.height = activeComp.height;\n\n        var preCompLayer = selectedLayers[0];\n        preCompLayer.property(\"Scale\").setValue([100,100]);\n        \n        preCompLayer.property(\"Position\").setValue([activeComp.width/2, activeComp.height/2]);\n\n        app.endUndoGroup();\n    } else {\n        alert(\"Please select exactly one precomposition layer.\");\n    }\n} else {\n    alert(\"No active composition found.\");\n}",
      "author": "S.Gridin"
    },
    {
      "name": "NewComp",
      "description": "Creates multiple compositions with different sizes (e.g., 16:9, 4:5, 9:16) and version numbers based on user input.",
      "script": "{\n    function showInputDialog() {\n        var dialog = new Window(\"dialog\", \"Composition Settings\");\n        dialog.orientation = \"column\";\n        \n        var nameDurationGroup = dialog.add(\"group\");\n        nameDurationGroup.orientation = \"row\";\n        nameDurationGroup.alignment = [\"fill\", \"center\"];\n        \n        var nameGroup = nameDurationGroup.add(\"group\");\n        nameGroup.orientation = \"column\";\n        nameGroup.add(\"statictext\", undefined, \"Base name:\");\n        var nameInput = nameGroup.add(\"edittext\", undefined, \"MyComp\");\n        nameInput.characters = 20;\n        \n        nameDurationGroup.add(\"panel\", undefined, undefined, {borderStyle: \"etched\"});\n        \n        var durationGroup = nameDurationGroup.add(\"group\");\n        durationGroup.orientation = \"column\";\n        durationGroup.add(\"statictext\", undefined, \"Duration (sec):\");\n        var durationInput = durationGroup.add(\"edittext\", undefined, \"30\");\n        durationInput.characters = 5;\n\n        dialog.add(\"statictext\", undefined, \"Select versions to create:\");\n        var versionGroup = dialog.add(\"group\");\n        versionGroup.orientation = \"row\";\n        \n        var versions = [];\n        for (var v = 1; v <= 5; v++) {\n            versions[v-1] = versionGroup.add(\"checkbox\", undefined, \"v\"+v);\n            versions[v-1].value = false;\n        }\n\n        var buttonsGroup = dialog.add(\"group\");\n        buttonsGroup.orientation = \"row\";\n\n        var okButton = buttonsGroup.add(\"button\", undefined, \"OK\", { name: \"ok\" });\n        var cancelButton = buttonsGroup.add(\"button\", undefined, \"Cancel\", { name: \"cancel\" });\n\n        var result = dialog.show();\n\n        if (result == 1) {\n            var selectedVersions = [];\n            for (var v = 0; v < 5; v++) {\n                if (versions[v].value) {\n                    selectedVersions.push(\"_v\"+(v+1));\n                }\n            }\n            \n            return {\n                duration: parseFloat(durationInput.text),\n                baseName: nameInput.text,\n                versions: selectedVersions.length > 0 ? selectedVersions : [\"\"]\n            };\n        } else {\n            return null;\n        }\n    }\n\n    app.beginUndoGroup(\"Create Multiple Compositions\");\n\n    var input = showInputDialog();\n\n    if (input != null) {\n        var compSettings = [\n            {width: 1920, height: 1080, suffix: \"_1920x1080\"},\n            {width: 1080, height: 1350, suffix: \"_1080x1350\"},\n            {width: 1080, height: 1920, suffix: \"_1080x1920\"}\n        ];\n\n        for (var i = 0; i < compSettings.length; i++) {\n            for (var v = 0; v < input.versions.length; v++) {\n                var versionSuffix = input.versions[v] === \"\" ? \"\" : input.versions[v];\n                var compName = input.baseName + compSettings[i].suffix + versionSuffix;\n                var comp = app.project.items.addComp(\n                    compName, \n                    compSettings[i].width, \n                    compSettings[i].height, \n                    1, \n                    input.duration, \n                    30\n                );\n                comp.openInViewer();\n            }\n        }\n    }\n\n    app.endUndoGroup();\n}",
      "author": "S.Gridin"
    },
    {
      "name": "Packshot_MT",
      "description": "Creates an adjustment layer with an animated transition using 'Gaussian Blur' and 'Lumetri Color' (Exposure).",
      "script": "(function() {\n    var durationDialog = new Window(\"dialog\", \"Transition Settings\"); \n    durationDialog.orientation = \"column\";\n    durationDialog.alignChildren = [\"fill\", \"top\"];\n    durationDialog.spacing = 15;\n    durationDialog.margins = 15;\n    \n    var durationGroup = durationDialog.add(\"group\");\n    durationGroup.orientation = \"row\";\n    durationGroup.alignChildren = [\"left\", \"center\"];\n    durationGroup.add(\"statictext\", undefined, \"Transition duration (seconds):\");\n    var durationInput = durationGroup.add(\"edittext\", undefined, \"1.0\");\n    durationInput.characters = 6;\n    durationInput.active = true;\n    \n    var customCheckbox = durationDialog.add(\"checkbox\", undefined, \"Set custom effect values\");\n    \n    var btnGroup = durationDialog.add(\"group\");\n    btnGroup.orientation = \"row\";\n    btnGroup.alignment = [\"right\", \"center\"];\n    btnGroup.spacing = 10;\n    \n    var nextBtn = btnGroup.add(\"button\", undefined, \"Create\");\n    var cancelBtn = btnGroup.add(\"button\", undefined, \"Cancel\");\n    \n    var userChoices = {\n        duration: 1.0,\n        useCustom: false,\n        blurValue: 100,\n        exposureValue: -2,\n        shouldCreate: false\n    };\n    \n    nextBtn.onClick = function() {\n        userChoices.duration = parseFloat(durationInput.text.toString().replace(',', '.')) || 1.0;\n        userChoices.useCustom = customCheckbox.value;\n        \n        if (userChoices.useCustom) {\n            durationDialog.hide();\n            showCustomValuesDialog();\n        } else {\n            userChoices.shouldCreate = true;\n            durationDialog.close();\n        }\n    };\n    \n    cancelBtn.onClick = function() {\n        durationDialog.close();\n    };\n    \n    function showCustomValuesDialog() {\n        var valuesDialog = new Window(\"dialog\", \"Custom Effect Values\");\n        valuesDialog.orientation = \"column\";\n        valuesDialog.alignChildren = [\"fill\", \"top\"];\n        valuesDialog.spacing = 15;\n        valuesDialog.margins = 15;\n        \n        var blurGroup = valuesDialog.add(\"group\");\n        blurGroup.orientation = \"column\";\n        blurGroup.spacing = 5;\n        blurGroup.add(\"statictext\", undefined, \"Gaussian Blur End Value:\");\n        var blurInput = blurGroup.add(\"edittext\", undefined, \"100\");\n        blurInput.characters = 6;\n        \n        var exposureGroup = valuesDialog.add(\"group\");\n        exposureGroup.orientation = \"column\";\n        exposureGroup.spacing = 5;\n        exposureGroup.add(\"statictext\", undefined, \"Exposure End Value:\");\n        var exposureInput = exposureGroup.add(\"edittext\", undefined, \"-2\");\n        exposureInput.characters = 6;\n        \n        var valuesBtnGroup = valuesDialog.add(\"group\");\n        valuesBtnGroup.orientation = \"row\";\n        valuesBtnGroup.alignment = [\"right\", \"center\"];\n        valuesBtnGroup.spacing = 10;\n        \n        var createBtn = valuesBtnGroup.add(\"button\", undefined, \"Create\");\n        var closeBtn = valuesBtnGroup.add(\"button\", undefined, \"Close\");\n        \n        createBtn.onClick = function() {\n            userChoices.blurValue = parseFloat(blurInput.text.toString().replace(',', '.')) || 100;\n            userChoices.exposureValue = parseFloat(exposureInput.text.toString().replace(',', '.')) || -2;\n            userChoices.shouldCreate = true;\n            valuesDialog.close();\n            durationDialog.close();\n        };\n        \n        closeBtn.onClick = function() {\n            valuesDialog.close();\n            durationDialog.close();\n        };\n        \n        valuesDialog.show();\n    }\n    \n    durationDialog.show();\n    \n    if (!userChoices.shouldCreate) return;\n    \n    var comp = app.project.activeItem;\n    if (!comp || !(comp instanceof CompItem)) {\n        alert(\"Please open a composition first!\");\n        return;\n    }\n\n    var startTime = comp.time;\n    var endTime = startTime + userChoices.duration;\n\n    var solid = comp.layers.addSolid(\n        [1, 0, 0],\n        \"Lumetri+Blur Transition\", \n        comp.width, \n        comp.height, \n        1.0,\n        comp.duration\n    );\n    solid.startTime = startTime;\n    solid.adjustmentLayer = true;\n\n    var effects = solid.property(\"ADBE Effect Parade\");\n    \n    var blur = effects.addProperty(\"ADBE Gaussian Blur 2\");\n    var blurParam = blur.property(\"ADBE Gaussian Blur 2-0001\");\n    \n    blurParam.setValueAtTime(startTime, 0);\n    blurParam.setValueAtTime(endTime, userChoices.blurValue);\n    \n    applyEasyEase(blurParam);\n\n    var lumetri = effects.addProperty(\"ADBE Lumetri\");\n    var exposureParam = lumetri.property(\"ADBE Lumetri-0011\");\n    \n    exposureParam.setValueAtTime(startTime, 0);\n    exposureParam.setValueAtTime(endTime, userChoices.exposureValue);\n    \n    applyEasyEase(exposureParam);\n\n    comp.time = startTime;\n    solid.selected = true;\n\n\n    function applyEasyEase(prop) {\n        if (prop.numKeys >= 2) {\n            for (var i = 1; i <= prop.numKeys; i++) {\n                prop.setInterpolationTypeAtKey(i, \n                    KeyframeInterpolationType.BEZIER, \n                    KeyframeInterpolationType.BEZIER);\n                prop.setTemporalEaseAtKey(i, \n                    [new KeyframeEase(0, 33)], \n                    [new KeyframeEase(0, 33)]);\n            }\n        }\n    }\n})();",
      "author": "S.Gridin"
    },
    {
      "name": "Audio_transit",
      "description": "Adds an audio fade-in to the selected layer, animating volume from -25dB to 0dB over 1 second.",
      "script": "(function() {\n    try {\n        if (!app.project || !app.project.activeItem || !(app.project.activeItem instanceof CompItem)) {\n            alert(\"Please open a composition\", \"Error\");\n            return;\n        }\n        var comp = app.project.activeItem;\n        \n        if (!comp.selectedLayers || comp.selectedLayers.length === 0) {\n            alert(\"Please select a layer with audio\", \"Error\");\n            return;\n        }\n        var layer = comp.selectedLayers[0];\n        \n        var hasAudio = false;\n        try {\n            hasAudio = layer.hasAudio;\n            if (!hasAudio) {\n                var audioProps = layer.property(\"ADBE Audio Properties\");\n                hasAudio = (audioProps !== null);\n            }\n        } catch(e) {\n            alert(\"Could not check layer audio properties\", \"Error\");\n            return;\n        }\n        \n        if (!hasAudio) {\n            alert(\"Selected layer does not contain audio\", \"Error\");\n            return;\n        }\n        \n        var audioLevels = null;\n        try {\n            audioLevels = layer.property(\"ADBE Audio Properties\").property(\"ADBE Audio Levels\");\n        } catch(e) {\n            try {\n                audioLevels = layer.property(\"Audio Levels\");\n            } catch(e) {\n                alert(\"Could not find audio levels property\", \"Error\");\n                return;\n            }\n        }\n        \n        try {\n            var actualStartTime = layer.inPoint;\n            \n            if (audioLevels.numKeys > 0) {\n                if (!confirm(\"Layer already has animation keyframes. Replace them?\")) {\n                    return;\n                }\n                while (audioLevels.numKeys > 0) {\n                    audioLevels.removeKey(1);\n                }\n            }\n            \n            audioLevels.setValueAtTime(actualStartTime, [-25, -25]);\n            audioLevels.setValueAtTime(actualStartTime + 1, [0, 0]);\n            \n            alert(\"Audio fade animation successfully added!\\nInitial value: -25 dB\\nAfter 1 second: 0 dB\", \"Done\");\n            \n        } catch(e) {\n            alert(\"Error setting keyframes:\\n\" + e.toString(), \"Error\");\n        }\n        \n    } catch(err) {\n        alert(\"Critical error:\\n\" + err.toString() + \"\\n\\nLine: \" + err.line, \"Script Error\");\n    }\n})();",
      "author": "S.Gridin"
    },
    {
      "name": "LeftRight_Side",
      "description": "Universal alignment tool that allows positioning layers to left/right halves or top/bottom halves of the composition.",
      "script": "var comp = app.project.activeItem; var layers = comp.selectedLayers; if (layers.length > 0) { var dialog = new Window(\"dialog\", \"Universal Center Align\"); dialog.orientation = \"column\"; dialog.alignChildren = \"fill\"; dialog.spacing = 12; dialog.margins = 15; var title = dialog.add(\"statictext\", undefined, \"Choose alignment options:\"); title.graphics.font = ScriptUI.newFont(\"Arial\", \"BOLD\", 14); title.alignment = \"center\"; var mainGroup = dialog.add(\"group\"); mainGroup.orientation = \"row\"; mainGroup.spacing = 20; mainGroup.alignChildren = \"top\"; var hPanel = mainGroup.add(\"panel\", undefined, \"Horizontal\"); hPanel.orientation = \"column\"; hPanel.alignChildren = \"left\"; hPanel.spacing = 6; hPanel.margins = 12; hPanel.preferredSize.width = 130; var hNone = hPanel.add(\"radiobutton\", undefined, \"[ - ] No Change\"); var hLeft = hPanel.add(\"radiobutton\", undefined, \"[ < ] Left Half\"); var hRight = hPanel.add(\"radiobutton\", undefined, \"[ > ] Right Half\"); var hMiddleCheck = hPanel.add(\"checkbox\", undefined, \"Center Vertically\"); hNone.value = true; var vPanel = mainGroup.add(\"panel\", undefined, \"Vertical\"); vPanel.orientation = \"column\"; vPanel.alignChildren = \"left\"; vPanel.spacing = 6; vPanel.margins = 12; vPanel.preferredSize.width = 130; var vNone = vPanel.add(\"radiobutton\", undefined, \"[ - ] No Change\"); var vTop = vPanel.add(\"radiobutton\", undefined, \"[ ^ ] Top Half\"); var vBottom = vPanel.add(\"radiobutton\", undefined, \"[ v ] Bottom Half\"); var vMiddleCheck = vPanel.add(\"checkbox\", undefined, \"Center Horizontally\"); vNone.value = true; var statusText = dialog.add(\"statictext\", undefined, \"Ready\"); statusText.alignment = \"center\"; statusText.graphics.font = ScriptUI.newFont(\"Arial\", \"REGULAR\", 11); var buttonGroup = dialog.add(\"group\"); buttonGroup.orientation = \"row\"; buttonGroup.alignment = \"center\"; buttonGroup.spacing = 12; var applyCloseBtn = buttonGroup.add(\"button\", undefined, \"Apply & Close\"); var cancelBtn = buttonGroup.add(\"button\", undefined, \"Cancel\"); applyCloseBtn.preferredSize.width = 100; applyCloseBtn.preferredSize.height = 30; cancelBtn.preferredSize.width = 80; cancelBtn.preferredSize.height = 30; applyCloseBtn.onClick = function() { app.beginUndoGroup(\"Universal Align\"); for (var i = 0; i < layers.length; i++) { var layer = layers[i]; var pos = layer.transform.position.value; var newX = pos[0]; var newY = pos[1]; if (hLeft.value) { newX = comp.width / 4; } else if (hRight.value) { newX = (comp.width * 3) / 4; } else if (vMiddleCheck.value && vNone.value) { newX = comp.width / 2; } if (vTop.value) { newY = comp.height / 4; } else if (vBottom.value) { newY = (comp.height * 3) / 4; } else if (hMiddleCheck.value && hNone.value) { newY = comp.height / 2; } layer.transform.position.setValue([newX, newY]); } app.endUndoGroup(); statusText.text = \"Applied to \" + layers.length + \" layer(s)\"; dialog.close(); }; cancelBtn.onClick = function() { dialog.close(); }; dialog.show(); } else { alert(\"Please select at least one layer!\"); }",
      "author": "S.Gridin"
    }
]
}
